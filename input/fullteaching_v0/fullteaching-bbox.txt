package com.fullteaching.backend.unitary.comment;import java.util.ArrayList;import java.util.List;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.comment.Comment;import com.fullteaching.backend.user.User;public class CommentUnitaryTest extends AbstractUnitTest {	@Before	public void setUp() throws Exception {	}	@Test	public void newForumEntryCommentTest() {		Comment cm = new Comment();		Assert.notNull(cm);				String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		Long date = System.currentTimeMillis();		String message = "This is the message";		Comment cm2 = new Comment(message, date, u);			Assert.notNull(cm2);		Assert.notNull(cm2.getReplies());		Assert.isTrue(u.equals(cm2.getUser()));		Assert.isTrue(date== cm2.getDate());		Assert.isTrue(message.equals(cm2.getMessage()));				Comment cm3 = new Comment(message, date, u, cm2);				Assert.notNull(cm3);		Assert.notNull(cm3.getReplies());		Assert.isTrue(u.equals(cm3.getUser()));		Assert.isTrue(date== cm3.getDate());		Assert.isTrue(message.equals(cm3.getMessage()));		Assert.isTrue(cm2.equals(cm3.getCommentParent()));	}	@Test	public void setAndGetCommentMessageTest() {		Comment cm = new Comment();		String message = "This is the message";		cm.setMessage(message);		Assert.notNull(cm);		Assert.isTrue(message.equals(cm.getMessage()));	}	@Test	public void setAndGetCommentDateTest() {		Comment cm = new Comment();		Long date = System.currentTimeMillis();		cm.setDate(date);		Assert.notNull(cm);		Assert.isTrue(date== cm.getDate());	}	@Test	public void setAndGetCommentRepliesTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		Long date = System.currentTimeMillis();		String message = "This is the message";		Comment rep = new Comment(message, date, u);				List<Comment> replies = new ArrayList<Comment>();		replies.add(rep);				Comment cm = new Comment();		cm.setReplies(replies);		Assert.notNull(cm);		Assert.notNull(cm.getReplies());		Assert.isTrue(replies.equals(cm.getReplies()));	}	@Test	public void setAndGetCommentUserTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);				Comment cm = new Comment();		cm.setUser(u);		Assert.notNull(cm);	}	@Test	public void setAndGetCommentParentTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		Long date = System.currentTimeMillis();		String message = "This is the message";		Comment parent = new Comment(message, date, u);				Comment cm = new Comment();		cm.setCommentParent(parent);		Assert.notNull(cm);	}}
package com.fullteaching.backend.unitary.course;import org.junit.BeforeClass;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.coursedetails.CourseDetails;import com.fullteaching.backend.user.User;public class CourseUnitaryTest extends AbstractUnitTest {	private static String title = "CURSO de Prueba";	private static String image = "Mock_image";	private static User teacher;			@BeforeClass	public static void initialize() {		String [] roles = {"ROLE_TEACHER"};		teacher = new User("mock_teacher","mock2222","t_mocky", null,roles);	}	@Test	public void newCourseTest() {		Course c2 = new Course();		Assert.notNull(c2);				Course c = new Course(title, image, teacher);		Assert.notNull(c);		Assert.isTrue(c.getTeacher().equals(teacher));		Assert.isTrue(c.getImage().equals(image));		Assert.isTrue(c.getTitle().equals(title));		Assert.notNull(c.getSessions());		Assert.notNull(c.getAttenders());		Assert.isNull(c.getCourseDetails());				CourseDetails cd = new CourseDetails();				Course c3 = new Course(title, image, teacher, cd);		Assert.notNull(c3);		Assert.isTrue(c3.getTeacher().equals(teacher));		Assert.isTrue(c3.getImage().equals(image));		Assert.isTrue(c3.getTitle().equals(title));		Assert.notNull(c3.getSessions());		Assert.notNull(c3.getAttenders());		Assert.notNull(c3.getCourseDetails());				Assert.isTrue(c3.getCourseDetails().equals(cd));	}	@Test	public void setAndGetCourseTitleTest() {		Course c = new Course();		c.setTitle(title);		Assert.isTrue(c.getTitle().equals(title));	}	@Test	public void setAndGetCourseImageTest() {		Course c = new Course();		c.setImage(image);		Assert.isTrue(c.getImage().equals(image));	}	@Test	public void setAndGetCourseTeacherTest() {		Course c = new Course();		c.setTeacher(teacher);		Assert.isTrue(c.getTeacher().equals(teacher));	}	@Test	public void setAndGetCourseDetailsTest() {		Course c = new Course();		c.setCourseDetails(new CourseDetails());		Assert.notNull(c.getCourseDetails());	}	@Test	public void equalCourseTest() {		CourseDetails cd = new CourseDetails();				Course c1 = new Course(title, image, teacher, cd);		c1.setId((long) Math.floor((Math.random()*Long.MAX_VALUE )));		Course c2 = new Course(title, image, teacher);		c1.setId((long) Math.floor((Math.random()*Long.MAX_VALUE)));				Assert.isTrue(c1.equals(c1));		Assert.isTrue(!c1.equals("not_a_course"));		Assert.isTrue(!c1.equals(c2));		Assert.isTrue(!c1.equals(null));			}}
package com.fullteaching.backend.unitary.coursedetails;import java.util.ArrayList;import java.util.List;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.coursedetails.CourseDetails;import com.fullteaching.backend.filegroup.FileGroup;import com.fullteaching.backend.forum.Forum;import com.fullteaching.backend.user.User;public class CourseDetailsUnitaryTests extends AbstractUnitTest {	@Before	public void setUp() throws Exception {	}	@Test	public void newCourseDetailsTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		CourseDetails cd = new CourseDetails();		Assert.notNull(cd);				Course c = new Course("to modify", "/../assets/images/default_session_image.png", u);		CourseDetails cd2 = new CourseDetails(c);				Assert.notNull(cd2);		Assert.isTrue(cd2.getCourse().equals(c));			}	@Test	public void setAndGetCourseDetailsInfoTest() {		CourseDetails cd = new CourseDetails();		cd.setInfo("this is info");		Assert.notNull(cd);		Assert.isTrue("this is info".equals(cd.getInfo()));	}	@Test	public void setAndGetCourseDetailsForumTest() {		CourseDetails cd = new CourseDetails();		Forum forum = new Forum();		cd.setForum(forum);		Assert.notNull(cd);		Assert.isTrue(forum.equals(cd.getForum()));	}	@Test	public void setAndGetCourseDetailsFilesTest() {		CourseDetails cd = new CourseDetails();		List<FileGroup> files= new ArrayList<FileGroup>();		cd.setFiles(files);		Assert.notNull(cd);		Assert.isTrue(files.equals(cd.getFiles()));	}	@Test	public void SetAndGetCourseDetailsCourseTest() {		CourseDetails cd = new CourseDetails();		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		Course c = new Course("to modify", "/../assets/images/default_session_image.png", u);		cd.setCourse(c);		Assert.notNull(cd);		Assert.isTrue(cd.getCourse().equals(c));	}}
package com.fullteaching.backend.unitary.entry;import java.util.ArrayList;import java.util.List;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.comment.Comment;import com.fullteaching.backend.entry.Entry;import com.fullteaching.backend.user.User;public class EntryUnitaryTest extends AbstractUnitTest {	@Before	public void setUp() throws Exception {	}	@Test	public void newForumEntryTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		long date = System.currentTimeMillis();				Entry e2 = new Entry();		Assert.notNull(e2);				Entry e = new Entry("Test Entry",date,u);		Assert.notNull(e);		Assert.isTrue("Test Entry".equals(e.getTitle()));		Assert.isTrue(date==e.getDate());		Assert.isTrue(u.equals(e.getUser()));	}	@Test	public void setAndGetEntryTitleTest() {		Entry e = new Entry();		e.setTitle("This title");		Assert.notNull(e);		Assert.isTrue("This title".equals(e.getTitle()));	}	@Test	public void setAndGetEntryDateTest() {		Entry e = new Entry();		long date = System.currentTimeMillis();		e.setDate(date);		Assert.notNull(e);		Assert.isTrue(date==e.getDate());	}	@Test	public void setAndGetEntryUserTest() {		String[] roles = {"TEACHER"};		User u =  new User("mock", "Pass1234", "mock", null, roles);		Entry e = new Entry();		Assert.notNull(e);		e.setUser(u);		Assert.isTrue(u.equals(e.getUser()));	}	@Test	public void setAndGetEntryCommentsTest() {		List<Comment> comments = new ArrayList<Comment>();				Entry e = new Entry();		e.setComments(comments);		Assert.notNull(e);		Assert.isTrue(comments.equals(e.getComments()));	}}
package com.fullteaching.backend.unitary.file;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.file.File;public class FileUnitaryTest extends AbstractUnitTest {	static int filetype = 0;	static String filename = "FileNAME.doc";	static String filelink = "this link";	static int fileorder = 1;		@Before	public void setUp() throws Exception {	}	@Test	public void newFileTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));		//No possiblity of test as Random is used		//Assert.isTrue(encoder.matches(filename, f1.getNameIdent()));						File f2 = new File (filetype, filename, filelink);		Assert.notNull(f2);		Assert.isTrue(filetype==f2.getType());		Assert.isTrue(filename.equals(f2.getName()));		Assert.isTrue(filelink.equals(f2.getLink()));		//No possiblity of test as Random is used		//Assert.isTrue(encoder.matches(filename, f2.getNameIdent()));				File f3 = new File (filetype, filename, filelink, fileorder);		Assert.notNull(f3);		Assert.isTrue(filetype==f3.getType());		Assert.isTrue(filename.equals(f3.getName()));		Assert.isTrue(filelink.equals(f3.getLink()));		Assert.isTrue(fileorder==f3.getIndexOrder());		//No possiblity of test as Random is used		//Assert.isTrue(encoder.matches(filename, f3.getNameIdent()));				File f4 = new File (filetype, ".doc");		Assert.notNull(f4);		Assert.isTrue(filetype==f4.getType());		Assert.isTrue(".doc".equals(f4.getName()));		Assert.isTrue(f4.getNameIdent().contains(".doc"));		//No possiblity of test as Random is used		//Assert.isTrue(encoder.matches(filename, f1.getNameIdent()));			}		@Test	public void setAndGetFileIdTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setId(0);		Assert.isTrue(0==f1.getId());	}	@Test	public void setAndGetFileTypeTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setType(1);		Assert.isTrue(1==f1.getType());	}	@Test	public void setAndGetFileNameTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setName("test_name");		Assert.isTrue("test_name".equals(f1.getName()));	}	@Test	public void setAndGetFileNameIdentTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setNameIdent("NAME_IDENT");		Assert.isTrue("NAME_IDENT".equals(f1.getNameIdent()));	}	@Test	public void setAndGetFileLinkTest() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setLink(filelink);		Assert.isTrue(filelink.equals(f1.getLink()));	}	@Test	public void testGetIndexOrder() {		File f1 = new File (filetype, filename);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				f1.setIndexOrder(5);		Assert.isTrue(5 == f1.getIndexOrder());	}	@Test	public void testEqualsObject() {		File f1 = new File (filetype, filename);		f1.setId(5);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				File f2 = new File (filetype, filename);		f2.setId(2);		Assert.notNull(f2);		Assert.isTrue(filetype==f2.getType());		Assert.isTrue(filename.equals(f2.getName()));				File f3 = new File (filetype, filename);		f3.setId(5);		Assert.notNull(f3);		Assert.isTrue(filetype==f3.getType());		Assert.isTrue(filename.equals(f3.getName()));						Assert.isTrue(f1.equals(f3));		Assert.isTrue(!f1.equals(null));		Assert.isTrue(!f1.equals("not a file"));		Assert.isTrue(!f1.equals(f2));	}	@Test	public void getFileExtTest() {		File f1 = new File (filetype, filename);		f1.setId(5);		Assert.notNull(f1);		Assert.isTrue(filetype==f1.getType());		Assert.isTrue(filename.equals(f1.getName()));				Assert.isTrue("doc".equals(f1.getFileExtension()));	}}
package com.fullteaching.backend.unitary.filegroup;import java.util.ArrayList;import java.util.List;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.file.File;import com.fullteaching.backend.filegroup.FileGroup;public class FileGroupUnitaryTest extends AbstractUnitTest {	private static String filegroup_name="FileGroup";	static int filetype = 0;	static String filename = "FileNAME.doc";		@Before	public void setUp() throws Exception {	}	@Test	public void testFileGroup() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				FileGroup fg2 = new FileGroup(filegroup_name);		Assert.notNull(fg2);		Assert.isTrue(filegroup_name.equals(fg2.getTitle()));				FileGroup fg3 = new FileGroup(filegroup_name,fg2);		Assert.notNull(fg3);		Assert.isTrue(filegroup_name.equals(fg3.getTitle()));		Assert.notNull(fg3.getFileGroupParent());		Assert.isTrue(fg2.equals(fg3.getFileGroupParent()));	}	@Test	public void setAndGetFileGroupIdTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				fg1.setId(1);		Assert.isTrue(1==fg1.getId());	}	@Test	public void setAndGetTitleTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				fg1.setTitle(filegroup_name);		Assert.isTrue(filegroup_name.equals(fg1.getTitle()));	}	@Test	public void setAndGetFilesTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				List<File> files = new ArrayList<File>();		files.add( new File (filetype, filename));		fg1.setFiles(files);				Assert.isTrue(fg1.getFiles().size()==1);			}	@Test	public void setAndGetFileGroupsTest() {		List<FileGroup> groups = new ArrayList<FileGroup>();		groups.add(new FileGroup(filegroup_name+"2"));		groups.add(new FileGroup(filegroup_name+"3"));				FileGroup fg3 = new FileGroup();		Assert.notNull(fg3);				fg3.setFileGroups(groups);				Assert.isTrue(fg3.getFileGroups().size()==2);	}	@Test	public void setAndGetFileGroupParentTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				FileGroup fg2 = new FileGroup(filegroup_name);		Assert.notNull(fg2);		Assert.isTrue(filegroup_name.equals(fg2.getTitle()));				fg1.setFileGroupParent(fg2);		Assert.notNull(fg1.getFileGroupParent());		Assert.isTrue(fg2.equals(fg1.getFileGroupParent()));	}	@Test	public void fileGroupEqualTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);		fg1.setId(1);		FileGroup fg2 = new FileGroup(filegroup_name);		Assert.notNull(fg2);		fg2.setId(2);		FileGroup fg3 = new FileGroup(filegroup_name);		Assert.notNull(fg3);		fg3.setId(1);				Assert.isTrue(!fg1.equals(null));		Assert.isTrue(!fg1.equals("not a group"));		Assert.isTrue(!fg1.equals(fg2));		Assert.isTrue(fg1.equals(fg3));			}	@Test	public void updateFileIndexOrderTest() {		FileGroup fg1 = new FileGroup();		Assert.notNull(fg1);				List<File> files = new ArrayList<File>();		files.add( new File (filetype, filename));		files.add( new File (filetype, filename+"2"));		fg1.setFiles(files);				fg1.updateFileIndexOrder();				List<File> list = fg1.getFiles(); 		Assert.isTrue(list.get(0).getIndexOrder()==0);		Assert.isTrue(list.get(1).getIndexOrder()==1);			}}
package com.fullteaching.backend.unitary.forum;import java.util.ArrayList;import java.util.List;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.entry.Entry;import com.fullteaching.backend.forum.Forum;public class ForumUnitaryTest extends AbstractUnitTest {		@Test	public void newForumTest() {		Forum f = new Forum();		Assert.notNull(f);				Forum f2 = new Forum(true);		Assert.notNull(f2);		Assert.isTrue(f2.isActivated());				Forum f3 = new Forum(false);		Assert.notNull(f3);		Assert.isTrue(!f3.isActivated());	}		@Test	public void activateAndDeactivateTest() {		Forum f = new Forum();		f.setActivated(true);		Assert.isTrue(f.isActivated());				f.setActivated(false);		Assert.isTrue(!f.isActivated());			}	@Test	public void testGetEntries() {		Forum f = new Forum();		List<Entry> entries = new ArrayList<Entry>();				f.setEntries(entries);				Assert.notNull(f);		Assert.isTrue(f.getEntries().equals(entries));	}}
package com.fullteaching.backend.unitary.session;import org.junit.Before;import org.junit.Test;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.session.Session;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.user.User;public class SessionUnitaryTest extends AbstractUnitTest {	private static String title = "Session Title";	private static String description = "Session Description";		@Before	public void setUp() throws Exception {	}	@Test	public void newSessionTest() {		//Empty Session		Session emptySession = new Session();		Assert.notNull(emptySession);				//Not empty		Long date = System.currentTimeMillis();		Session session = new Session(title, description, date);		Assert.notNull(session);		Assert.isTrue(date == session.getDate());		Assert.isTrue(title.equals(session.getTitle()));		Assert.isTrue(description.equals(session.getDescription()));				//with course 		String[] roles = {"STUDENT"};		User u = new User("mock_teacher","mock2222","t_mocky", null,roles);		Course c= CourseTestUtils.newCourseWithCd("course", u, null, "this is the info", false);				Session c_session = new Session(title, description, date, c);		Assert.notNull(c_session);		Assert.isTrue(date == c_session.getDate());		Assert.isTrue(title.equals(c_session.getTitle()));		Assert.isTrue(description.equals(c_session.getDescription()));		Assert.isTrue(c.equals(c_session.getCourse()));	}	@Test	public void setAndGetSessionTitleTest() {		Session session = new Session();		session.setTitle(title);		Assert.notNull(session);		Assert.isTrue(title.equals(session.getTitle()));	}	@Test	public void setAndGetSessionDescriptionTest() {		Session session = new Session();		session.setDescription(description);		Assert.notNull(session);		Assert.isTrue(description.equals(session.getDescription()));	}	@Test	public void setAndGetSessionDateTest() {		Session session = new Session();		Long date = System.currentTimeMillis();		session.setDate(date);		Assert.notNull(session);		Assert.isTrue(date == session.getDate());		}	@Test	public void setAndGetSessionCourseTest() {		String[] roles = {"STUDENT"};		User u = new User("mock_teacher","mock2222","t_mocky", null,roles);		Course c= CourseTestUtils.newCourseWithCd("course", u, null, "this is the info", false);				Session session = new Session();		session.setCourse(c);		Assert.notNull(session);		Assert.isTrue(c.equals(session.getCourse()));			}	@Test	public void equalSessionTest() {		Session session1 = new Session();		session1.setId(1);		Session session2 = new Session();		session2.setId(1);		Session session3 = new Session();		session3.setId(2);		Assert.notNull(session1);		Assert.notNull(session2);		Assert.notNull(session3);		Assert.isTrue(session1.equals(session2));			Assert.isTrue(session1.equals(session1));		Assert.isTrue(!session1.equals(null));		Assert.isTrue(!session1.equals("not_a_session"));		Assert.isTrue(!session1.equals(session3));			}}
package com.fullteaching.backend.unitary.user;import java.util.Arrays;import org.junit.Test;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.util.Assert;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.user.User;/** * @author gtunon * *//*@Transactional After each test the BBDD is rolled back*/// @Transactional not necessary herepublic class UserUnitaryTest extends AbstractUnitTest {	/*Test user data*/	String name = "TestUser";	String password = "blablaba";	String nickName = "testi";	String picture = "picture/test.jpg";	String[] roles = {"STUDENT"};			/**	 * Test method for {@link com.fullteaching.backend.user.User#User(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])}	 * and {@link com.fullteaching.backend.user.User#User()}.	 */	@Test	public void newUserTest() {				//Empty user		User emptyUser = new User();		Assert.notNull(emptyUser, "User failed to be created");				//User with picture		User u = new User(name, password, nickName, picture,roles);		Assert.notNull(u, "User failed to be created");		Assert.isTrue(name.equals(u.getName()), "User failed to be created");		Assert.isTrue((new BCryptPasswordEncoder()).matches(password, u.getPasswordHash()), "User failed to be created");		Assert.isTrue(nickName.equals(u.getNickName()), "User failed to be created");		Assert.isTrue(picture.equals(u.getPicture()), "User failed to be created");		Assert.isTrue(roles.length == u.getRoles().size(), "User failed to be created");				//user witout picture		u = new User(name, password, nickName, null,roles);		Assert.notNull(u, "User failed to be created");		Assert.isTrue(name.equals(u.getName()), "User failed to be created");		Assert.isTrue((new BCryptPasswordEncoder()).matches(password, u.getPasswordHash()), "User failed to be created");		Assert.isTrue(nickName.equals(u.getNickName()), "User failed to be created");		Assert.notNull(u.getPicture(), "User failed to be created");		Assert.isTrue(roles.length == u.getRoles().size(), "User failed to be created");	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#getName()}.	 * and {@link com.fullteaching.backend.user.User#setName(java.lang.String)}.	 */	@Test	public void setAndGetUserNameTest() {		User u = new User();		u.setName(name);		Assert.isTrue(name.equals(u.getName()), "testSetAndGetUserName FAIL");	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#setPasswordHash(java.lang.String)}	 * and {@link com.fullteaching.backend.user.User#getPasswordHash()}.	 */	@Test	public void setAndGetHashPasswordTest() {		User u = new User();		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();		u.setPasswordHash(encoder.encode(password));		Assert.isTrue(encoder.matches(password, u.getPasswordHash()), "setAndGetHashPasswordTest FAIL");	}		/**	 * Test method for {@link com.fullteaching.backend.user.User#getRoles()}	 * and  {@link com.fullteaching.backend.user.User#setRoles(java.util.List)}.	 */	@Test	public void setAndGetUserRolesTest() {		User u = new User();			u.setRoles(Arrays.asList(roles));		Assert.isTrue(roles.length == u.getRoles().size(), "SetAndGetUserRolesTest FAIL");	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#getNickName()} 	 * and {@link com.fullteaching.backend.user.User#setNickName(java.lang.String)}.	 */	@Test	public void setAndGetUserNickNameTest() {		User u = new User();		u.setNickName(nickName);		Assert.isTrue(nickName.equals(u.getNickName()), "SetAndGetUserNickNameTest FAIL");	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#getPicture()} 	 * and {@link com.fullteaching.backend.user.User#setPicture(java.lang.String)}.	 */	@Test	public void setAndGetUserPictureTest() {		User u = new User();		u.setPicture(picture);		Assert.isTrue(picture.equals(u.getPicture()), "SetAndGetUserPictureTest FAIL");	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#getRegistrationDate()} 	 * and {@link com.fullteaching.backend.user.User#setRegistrationDate(long)}.	 */	@Test	public void setAndGetUserRegistrationDateTest() {		User u = new User();		Long date = System.currentTimeMillis();		u.setRegistrationDate(date);		Assert.isTrue(date==u.getRegistrationDate());	}	/**	 * Test method for {@link com.fullteaching.backend.user.User#equals(java.lang.Object)}.	 */	@Test	public void equalUserTest() {		User u1 = new User(name, password, nickName, picture,roles);		User u2 = new User(name, password, nickName, picture,roles);		Assert.isTrue(u1.equals(u2), "EqualUserTest FAIL");		Assert.isTrue(!u1.equals("not An User"), "EqualUserTest FAIL");		Assert.isTrue(u1.equals(u1), "EqualUserTest FAIL");				Assert.isTrue(!u1.equals(null), "EqualUserTest FAIL");	}}