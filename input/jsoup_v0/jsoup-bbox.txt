package org.jsoup.integration;  import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements; import org.junit.Test;  import java.io.File; import java.io.IOException; import java.net.URISyntaxException;  import static org.junit.Assert.*;  /**   Integration test: parses from real-world example HTML.   @author Jonathan Hedley, jonathan@hedley.net */ public class ParseTest {      @Test public void testSmhBizArticle() throws IOException {         File in = getFile("/htmltests/smh-biz-article-1.html");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html");         assertEquals("The board’s next fear: the female quota", doc.title()); // note that the apos in the source is a literal ’ (8217), not escaped or '         assertEquals("en", doc.select("html").attr("xml:lang"));          Elements articleBody = doc.select(".articleBody > *");         assertEquals(17, articleBody.size());         // todo: more tests!              }          @Test public void testNewsHomepage() throws IOException {         File in = getFile("/htmltests/news-com-au-home.html");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/");         assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title());         assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim());                  Element a = doc.select("a[href=/entertainment/horoscopes]").first();         assertEquals("/entertainment/horoscopes", a.attr("href"));         assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"));                  Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first();         assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href"));         assertEquals(hs.attr("href"), hs.attr("abs:href"));     }          @Test public void testGoogleSearchIpod() throws IOException {         File in = getFile("/htmltests/google-ipod.html");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10");         assertEquals("ipod - Google Search", doc.title());         Elements results = doc.select("h3.r > a");         assertEquals(12, results.size());         assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA",                  results.get(0).attr("href"));         assertEquals("http://www.apple.com/itunes/",                 results.get(1).attr("href"));     }          @Test public void testBinary() throws IOException {         File in = getFile("/htmltests/thumb.jpg");         Document doc = Jsoup.parse(in, "UTF-8");         // nothing useful, but did not blow up         assertTrue(doc.text().contains("gd-jpeg"));     }          @Test public void testYahooJp() throws IOException {         File in = getFile("/htmltests/yahoo-jp.html");         Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html"); // http charset is utf-8.         assertEquals("Yahoo! JAPAN", doc.title());         Element a = doc.select("a[href=t/2322m2]").first();         assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2",                  a.attr("abs:href")); // session put into <base>         assertEquals("全国、人気の駅ランキング", a.text());     }          File getFile(String resourceName) {         try {             File file = new File(ParseTest.class.getResource(resourceName).toURI());             return file;         }         catch (URISyntaxException e) {             throw new IllegalStateException(e);         }     } } 
package org.jsoup.integration;  import org.junit.Test; import static org.junit.Assert.*; import org.jsoup.nodes.Document; import org.jsoup.Jsoup;  import java.net.URL; import java.io.IOException;  /**  Tests the URL connection. Not enabled by default, so tests don't require network connection.   @author Jonathan Hedley, jonathan@hedley.net */ public class UrlConnectTest {     // @Test // uncomment to enable test     public void fetchURl() throws IOException {         String url = "http://www.google.com"; // no trailing / to force redir         Document doc = Jsoup.parse(new URL(url), 10*1000);         assertTrue(doc.title().contains("Google"));     }           // @Test // uncomment to enable     public void exceptOnUnknownContentType() {         String url = "http://jsoup.org/rez/osi_logo.png"; // not text/* but image/png, should throw         boolean threw = false;         try {             Document doc = Jsoup.parse(new URL(url), 3000);         } catch (IOException e) {             threw = true;         }         assertTrue(threw);     }      @Test public void noop() {} } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.Test;  import static org.junit.Assert.*;  /**  Tests for Document.   @author Jonathan Hedley, jonathan@hedley.net */ public class DocumentTest {     @Test public void setTextPreservesDocumentStructure() {         Document doc = Jsoup.parse("<p>Hello</p>");         doc.text("Replaced");         assertEquals("Replaced", doc.text());         assertEquals("Replaced", doc.body().text());         assertEquals(1, doc.select("head").size());     }          @Test public void testTitles() {         Document noTitle = Jsoup.parse("<p>Hello</p>");         Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>");                  assertEquals("", noTitle.title());         noTitle.title("Hello");         assertEquals("Hello", noTitle.title());         assertEquals("Hello", noTitle.select("title").first().text());                  assertEquals("First", withTitle.title());         withTitle.title("Hello");         assertEquals("Hello", withTitle.title());         assertEquals("Hello", withTitle.select("title").first().text());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.select.Elements; import org.junit.Test;  import static org.junit.Assert.*;  import java.util.List; import java.util.Set;  /**  * Tests for Element (DOM stuff mostly).  *  * @author Jonathan Hedley  */ public class ElementTest {     private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";      @Test public void getElementsByTagName() {         Document doc = Jsoup.parse(reference);         List<Element> divs = doc.getElementsByTag("div");         assertEquals(2, divs.size());         assertEquals("div1", divs.get(0).id());         assertEquals("div2", divs.get(1).id());          List<Element> ps = doc.getElementsByTag("p");         assertEquals(2, ps.size());         assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText());         assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText());         List<Element> ps2 = doc.getElementsByTag("P");         assertEquals(ps, ps2);          List<Element> imgs = doc.getElementsByTag("img");         assertEquals("foo.png", imgs.get(0).attr("src"));          List<Element> empty = doc.getElementsByTag("wtf");         assertEquals(0, empty.size());     }      @Test public void testGetElementById() {         Document doc = Jsoup.parse(reference);         Element div = doc.getElementById("div1");         assertEquals("div1", div.id());         assertNull(doc.getElementById("none"));          Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");         Element div2 = doc2.getElementById("2");         assertEquals("div", div2.tagName()); // not the span         Element span = div2.child(0).getElementById("2"); // called from <p> context should be span         assertEquals("span", span.tagName());     }      @Test public void testGetText() {         Document doc = Jsoup.parse(reference);         assertEquals("Hello Another element", doc.text());         assertEquals("Another element", doc.getElementsByTag("p").get(1).text());     }      @Test public void testNormalisesText() {         String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";         Document doc = Jsoup.parse(h);         String text = doc.text();         assertEquals("Hello There. Here is some text.", text);     }      @Test public void testKeepsPreText() {         String h = "<p>Hello \n \n there.</p> <div><pre>  What's \n\n  that?</pre>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there.   What's \n\n  that?", doc.text());     }      @Test public void testKeepsPreTextInCode() {         String h = "<pre><code>code\n\ncode</code></pre>";         Document doc = Jsoup.parse(h);         assertEquals("code\n\ncode", doc.text());         assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html());     }      @Test public void testGetSiblings() {         Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");         Element p = doc.getElementById("1");         assertEquals("there", p.text());         assertEquals("Hello", p.previousElementSibling().text());         assertEquals("this", p.nextElementSibling().text());         assertEquals("Hello", p.firstElementSibling().text());         assertEquals("element", p.lastElementSibling().text());     }          @Test public void testElementSiblingIndex() {         Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");         Elements ps = doc.select("p");         assertTrue(0 == ps.get(0).elementSiblingIndex());         assertTrue(1 == ps.get(1).elementSiblingIndex());         assertTrue(2 == ps.get(2).elementSiblingIndex());     }      @Test public void testGetElementsWithClass() {         Document doc = Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");          List<Element> els = doc.getElementsByClass("mellow");         assertEquals(2, els.size());         assertEquals("div", els.get(0).tagName());         assertEquals("span", els.get(1).tagName());          List<Element> els2 = doc.getElementsByClass("yellow");         assertEquals(2, els2.size());         assertEquals("div", els2.get(0).tagName());         assertEquals("b", els2.get(1).tagName());          List<Element> none = doc.getElementsByClass("solo");         assertEquals(0, none.size());     }      @Test public void testGetElementsWithAttribute() {         Document doc = Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");         List<Element> els = doc.getElementsByAttribute("style");         assertEquals(2, els.size());         assertEquals("div", els.get(0).tagName());         assertEquals("b", els.get(1).tagName());          List<Element> none = doc.getElementsByAttribute("class");         assertEquals(0, none.size());     }      @Test public void testGetElementsWithAttributeValue() {         Document doc = Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");         List<Element> els = doc.getElementsByAttributeValue("style", "bold");         assertEquals(1, els.size());         assertEquals("div", els.get(0).tagName());          List<Element> none = doc.getElementsByAttributeValue("style", "none");         assertEquals(0, none.size());     }      @Test public void testClassDomMethods() {         Document doc = Jsoup.parse("<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>");         List<Element> els = doc.getElementsByAttribute("class");         Element span = els.get(0);         assertEquals("mellow yellow", span.className());         assertTrue(span.hasClass("mellow"));         assertTrue(span.hasClass("yellow"));         Set<String> classes = span.classNames();         assertEquals(2, classes.size());         assertTrue(classes.contains("mellow"));         assertTrue(classes.contains("yellow"));          assertEquals("", doc.className());         assertFalse(doc.hasClass("mellow"));     }      @Test public void testClassUpdates() {         Document doc = Jsoup.parse("<div class='mellow yellow'></div>");         Element div = doc.select("div").first();          div.addClass("green");         assertEquals("mellow yellow green", div.className());         div.removeClass("red"); // noop         div.removeClass("yellow");         assertEquals("mellow green", div.className());         div.toggleClass("green").toggleClass("red");         assertEquals("mellow red", div.className());     }      @Test public void testOuterHtml() {         Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");         assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>",                 TextUtil.stripNewlines(doc.outerHtml()));     }      @Test public void testInnerHtml() {         Document doc = Jsoup.parse("<div><p>Hello</p></div>");         assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html());     }      @Test public void testFormatHtml() {         Document doc = Jsoup.parse("<div><p>Hello</p></div>");         assertEquals("<html>\n<head>\n</head>\n<body>\n <div>\n  <p>Hello</p>\n </div>\n</body>\n</html>", doc.html());     }      @Test public void testSetText() {         String h = "<div id=1>Hello <p>there <b>now</b></p></div>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there now", doc.text()); // need to sort out node whitespace         assertEquals("there now", doc.select("p").get(0).text());          Element div = doc.getElementById("1").text("Gone");         assertEquals("Gone", div.text());         assertEquals(0, doc.select("p").size());     }          @Test public void testAddNewElement() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.appendElement("p").text("there");         div.appendElement("P").attr("class", "second").text("now");         assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>",                 TextUtil.stripNewlines(doc.html()));     }          @Test public void testPrependElement() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prependElement("p").text("Before");         assertEquals("Before", div.child(0).text());         assertEquals("Hello", div.child(1).text());     }          @Test public void testAddNewText() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.appendText(" there & now >");         assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()));     }          @Test public void testPrependText() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prependText("there & now > ");         assertEquals("there & now > Hello", div.text());         assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html()));     }          @Test public void testAddNewHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.append("<p>there</p><p>now</p>");         assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()));     }          @Test public void testPrependNewHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.prepend("<p>there</p><p>now</p>");         assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html()));     }          @Test public void testSetHtml() {         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");         Element div = doc.getElementById("1");         div.html("<p>there</p><p>now</p>");         assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html()));     }      @Test public void testWrap() {         Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>");         Element p = doc.select("p").first();         p.wrap("<div class='head'></div>");         assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));          Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");         assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>",                  TextUtil.stripNewlines(doc.body().html()));          assertEquals(ret, p);     }      @Test public void testWrapWithRemainder() {         Document doc = Jsoup.parse("<div><p>Hello</p></div>");         Element p = doc.select("p").first();         p.wrap("<div class='head'></div><p>There!</p>");         assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void testHasText() {         Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div>");         Element div = doc.select("div").first();         Elements ps = doc.select("p");          assertTrue(div.hasText());         assertTrue(ps.first().hasText());         assertFalse(ps.last().hasText());     }   } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.jsoup.parser.Tag; import org.junit.Test;  import static org.junit.Assert.*; /**  Tests Nodes   @author Jonathan Hedley, jonathan@hedley.net */ public class NodeTest {     @Test public void handlesBaseUri() {         Tag tag = Tag.valueOf("a");         Attributes attribs = new Attributes();         attribs.put("relHref", "/foo");         attribs.put("absHref", "http://bar/qux");          Element noBase = new Element(tag, "", attribs);         assertEquals("", noBase.absUrl("relHref")); // with no base, should NOT fallback to href attrib, whatever it is         assertEquals("http://bar/qux", noBase.absUrl("absHref")); // no base but valid attrib, return attrib          Element withBase = new Element(tag, "http://foo/", attribs);         assertEquals("http://foo/foo", withBase.absUrl("relHref")); // construct abs from base + rel         assertEquals("http://bar/qux", withBase.absUrl("absHref")); // href is abs, so returns that         assertEquals("", withBase.absUrl("noval"));          Element dodgyBase = new Element(tag, "wtf://no-such-protocol/", attribs);         assertEquals("http://bar/qux", dodgyBase.absUrl("absHref")); // base fails, but href good, so get that         assertEquals("", dodgyBase.absUrl("relHref")); // base fails, only rel href, so return nothing      }      @Test public void handlesAbsPrefix() {         Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/");         Element a = doc.select("a").first();         assertEquals("/foo", a.attr("href"));         assertEquals("http://jsoup.org/foo", a.attr("abs:href"));         assertFalse(a.hasAttr("abs:href")); // only realised on the get method, not in has or iterator     }          @Test public void testRemove() {         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");         Element p = doc.select("p").first();         p.childNode(0).remove();                  assertEquals("two three", p.text());         assertEquals("<span>two</span> three", p.html());     }          @Test public void testReplace() {         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");         Element p = doc.select("p").first();         Element insert = doc.createElement("em").text("foo");         p.childNode(1).replaceWith(insert);                  assertEquals("One <em>foo</em> three", p.html());     } } 
package org.jsoup.nodes;  import org.jsoup.Jsoup; import org.junit.Test;  import static org.junit.Assert.*;  /**  Test TextNodes   @author Jonathan Hedley, jonathan@hedley.net */ public class TextNodeTest {     @Test public void testBlank() {         TextNode one = new TextNode("", "");         TextNode two = new TextNode("     ", "");         TextNode three = new TextNode("  \n\n   ", "");         TextNode four = new TextNode("Hello", "");         TextNode five = new TextNode("  \nHello ", "");          assertTrue(one.isBlank());         assertTrue(two.isBlank());         assertTrue(three.isBlank());         assertFalse(four.isBlank());         assertFalse(five.isBlank());     }          @Test public void testTextBean() {         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");         Element p = doc.select("p").first();                  TextNode tn = (TextNode) p.childNode(2);         assertEquals(" three", tn.text());                  tn.text(" POW!");         assertEquals("One <span>two</span> POW!", p.html());     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Element; import org.junit.Test;  import static org.junit.Assert.*;  /**  Test suite for attribute parser.   @author Jonathan Hedley, jonathan@hedley.net */ public class AttributeParseTest {      @Test public void parsesRoughAttributeString() {         String html = "<a id=\"123\" class=\"baz = 'bar'\" style = 'border: 2px'qux zim foo = 12 mux=18 />";         // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>          Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(7, attr.size());         assertEquals("123", attr.get("id"));         assertEquals("baz = 'bar'", attr.get("class"));         assertEquals("border: 2px", attr.get("style"));         assertEquals("", attr.get("qux"));         assertEquals("", attr.get("zim"));         assertEquals("12", attr.get("foo"));         assertEquals("18", attr.get("mux"));     }      @Test public void parsesEmptyString() {         String html = "<a />";         Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(0, attr.size());     }      @Test public void emptyOnNoKey() {         String html = "<a =empty />";         Element el = Jsoup.parse(html).getElementsByTag("a").get(0);         Attributes attr = el.attributes();         assertEquals(0, attr.size());     } } 
package org.jsoup.parser;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.nodes.Comment; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import org.junit.Test;  import java.util.List;  import static org.junit.Assert.*;  /**  Tests for the Parser   @author Jonathan Hedley, jonathan@hedley.net */ public class ParserTest {      @Test public void parsesSimpleDocument() {         String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";         Document doc = Jsoup.parse(html);         // need a better way to verify these:         Element p = doc.body().child(0);         assertEquals("p", p.tagName());         Element img = p.child(0);         assertEquals("foo.png", img.attr("src"));         assertEquals("img", img.tagName());     }      @Test public void parsesRoughAttributes() {         String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";         Document doc = Jsoup.parse(html);          // need a better way to verify these:         Element p = doc.body().child(0);         assertEquals("p", p.tagName());         assertEquals("foo > bar", p.attr("class"));     }      @Test public void parsesComments() {         String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";         Document doc = Jsoup.parse(html);                  Element body = doc.body();         Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag         assertEquals(" <table><tr><td></table> ", comment.getData());         Element p = body.child(1);         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());     }      @Test public void parsesUnterminatedComments() {         String html = "<p>Hello<!-- <tr><td>";         Document doc = Jsoup.parse(html);         Element p = doc.getElementsByTag("p").get(0);         assertEquals("Hello", p.text());         TextNode text = (TextNode) p.childNode(0);         assertEquals("Hello", text.getWholeText());         Comment comment = (Comment) p.childNode(1);         assertEquals(" <tr><td>", comment.getData());     }      @Test public void parsesUnterminatedTag() {         String h1 = "<p";         Document doc = Jsoup.parse(h1);         assertEquals(1, doc.getElementsByTag("p").size());          String h2 = "<div id=1<p id='2'";         doc = Jsoup.parse(h2);         Element d = doc.getElementById("1");         assertEquals(1, d.children().size());         Element p = doc.getElementById("2");         assertNotNull(p);     }      @Test public void parsesUnterminatedAttribute() {         String h1 = "<p id=\"foo";         Document doc = Jsoup.parse(h1);         Element p = doc.getElementById("foo");         assertNotNull(p);         assertEquals("p", p.tagName());     }      @Test public void createsDocumentStructure() {         String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";         Document doc = Jsoup.parse(html);         Element head = doc.head();         Element body = doc.body();          assertEquals(1, doc.children().size()); // root node: contains html node         assertEquals(2, doc.child(0).children().size()); // html node: head and body         assertEquals(3, head.children().size());         assertEquals(1, body.children().size());          assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"));         assertEquals(0, body.getElementsByTag("meta").size());         assertEquals("jsoup", doc.title());         assertEquals("Hello world", body.text());         assertEquals("Hello world", body.children().get(0).text());     }      @Test public void createsStructureFromBodySnippet() {         // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine         // needs to move into the start of the body         String html = "foo <b>bar</b> baz";         Document doc = Jsoup.parse(html);         assertEquals ("foo bar baz", doc.text());      }      @Test public void handlesEscapedData() {         String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";         Document doc = Jsoup.parse(html);         Element div = doc.getElementsByTag("div").get(0);          assertEquals("Surf & Turf", div.attr("title"));         assertEquals("Reef & Beef", div.text());     }      @Test public void handlesDataOnlyTags() {         String t = "<style>font-family: bold</style>";         List<Element> tels = Jsoup.parse(t).getElementsByTag("style");         assertEquals("font-family: bold", tels.get(0).data());         assertEquals("", tels.get(0).text());          String s = "<p>Hello</p><script>Nope</script><p>There</p>";         Document doc = Jsoup.parse(s);         assertEquals("Hello There", doc.text());         assertEquals("Nope", doc.data());     }          @Test public void handlesTextArea() {         Document doc = Jsoup.parse("<textarea>Hello</textarea>");         Elements els = doc.select("textarea");         assertEquals("Hello", els.text());         assertEquals("Hello", els.val());     }      @Test public void createsImplicitLists() {         String h = "<li>Point one<li>Point two";         Document doc = Jsoup.parse(h);         Elements ol = doc.select("ul"); // should have created a default ul.         assertEquals(1, ol.size());         assertEquals(2, ol.get(0).children().size());          // no fiddling with non-implicit lists         String h2 = "<ol><li><p>Point the first<li><p>Point the second";         Document doc2 = Jsoup.parse(h2);          assertEquals(0, doc2.select("ul").size());         assertEquals(1, doc2.select("ol").size());         assertEquals(2, doc2.select("ol li").size());         assertEquals(2, doc2.select("ol li p").size());         assertEquals(1, doc2.select("ol li").get(0).children().size()); // one p in first li     }      @Test public void createsImplicitTable() {         String h = "<td>Hello<td><p>There<p>now";         Document doc = Jsoup.parse(h);         assertEquals("<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>", TextUtil.stripNewlines(doc.body().html()));     }      @Test public void handlesBaseTags() {         String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>";         Document doc = Jsoup.parse(h, "http://foo/");         assertEquals("http://bar", doc.baseUri()); // gets updated as base changes, so doc.createElement has latest.          Elements anchors = doc.getElementsByTag("a");         assertEquals(3, anchors.size());          assertEquals("http://foo/", anchors.get(0).baseUri());         assertEquals("http://foo/2/", anchors.get(1).baseUri());         assertEquals("http://bar", anchors.get(2).baseUri());          assertEquals("http://foo/1", anchors.get(0).absUrl("href"));         assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"));         assertEquals("http://bar/4", anchors.get(2).absUrl("href"));     }      @Test public void handlesCdata() {         String h = "<div id=1><![CData[<html>\n<foo><&amp;]]></div>"; // "cdata" insensitive. the &amp; in there should remain literal         Document doc = Jsoup.parse(h);         Element div = doc.getElementById("1");         assertEquals("<html> <foo><&amp;", div.text());         assertEquals(0, div.children().size());         assertEquals(1, div.childNodes().size()); // no elements, one text node     }      @Test public void handlesInvalidStartTags() {         String h = "<div>Hello < There <&amp;></div>"; // parse to <div {#text=Hello < There <&>}>         Document doc = Jsoup.parse(h);         assertEquals("Hello < There <&>", doc.select("div").first().text());     }          @Test public void handlesUnknownTags() {         String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";         Document doc = Jsoup.parse(h);         Elements foos = doc.select("foo");         assertEquals(2, foos.size());         assertEquals("bar", foos.first().attr("title"));         assertEquals("qux", foos.last().attr("title"));         assertEquals("there", foos.last().text());     }      @Test public void handlesUnknownInlineTags() {         String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";         Document doc = Jsoup.parseBodyFragment(h);         String out = doc.body().html();         assertEquals(h, TextUtil.stripNewlines(out));     }          @Test public void handlesEmptyBlocks() {         String h = "<div id=1/><div id=2><img /></div>";         Document doc = Jsoup.parse(h);         Element div1 = doc.getElementById("1");         assertTrue(div1.children().isEmpty());     }          @Test public void handlesMultiClosingBody() {         String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";         Document doc = Jsoup.parse(h);         assertEquals(3, doc.select("p").size());         assertEquals(3, doc.body().children().size());     }          @Test public void handlesUnclosedDefinitionLists() {         String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";         Document doc = Jsoup.parse(h);         assertEquals(4, doc.body().getElementsByTag("dl").first().children().size());         Elements dts = doc.select("dt");         assertEquals(2, dts.size());         assertEquals("Zug", dts.get(1).nextElementSibling().text());     }      @Test public void handlesFrames() {         String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";         Document doc = Jsoup.parse(h);         assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset><body></body></html>",                 TextUtil.stripNewlines(doc.html()));     }      @Test public void handlesJavadocFont() {         String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";         Document doc = Jsoup.parse(h);         Element a = doc.select("a").first();         assertEquals("Deprecated", a.text());         assertEquals("font", a.child(0).tagName());         assertEquals("b", a.child(0).child(0).tagName());     }      @Test public void handlesBaseWithoutHref() {         String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";         Document doc = Jsoup.parse(h, "http://example.com/");         Element a = doc.select("a").first();         assertEquals("/foo", a.attr("href"));         assertEquals("http://example.com/foo", a.attr("abs:href"));     }      @Test public void normalisesDocument() {} // Defects4J: flaky method //     @Test public void normalisesDocument() { //         String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven "; //         Document doc = Jsoup.parse(h); //         assertEquals("<!doctype html><html><head><link /></head><body>Five Six Seven  One Two Four Three</body></html>", //                 TextUtil.stripNewlines(doc.html())); // is spaced OK if not newline & space stripped //     }      @Test public void normalisesEmptyDocument() {         Document doc = Jsoup.parse("");         assertEquals("<html><head></head><body></body></html>",TextUtil.stripNewlines(doc.html()));     }      @Test public void normalisesHeadlessBody() {         Document doc = Jsoup.parse("<html><body><span class=\"foo\">bar</span>");         assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>",                 TextUtil.stripNewlines(doc.html()));     }   } 
package org.jsoup.parser;  import org.junit.Test; import static org.junit.Assert.*;  /**  Tag tests.  @author Jonathan Hedley, jonathan@hedley.net */ public class TagTest {      @Test public void isCaseInsensitive() {         Tag p1 = Tag.valueOf("P");         Tag p2 = Tag.valueOf("p");         assertEquals(p1, p2);     }      @Test public void trims() {         Tag p1 = Tag.valueOf("p");         Tag p2 = Tag.valueOf(" p ");         assertEquals(p1, p2);     }      @Test public void equality() {         Tag p1 = Tag.valueOf("p");         Tag p2 = Tag.valueOf("p");         assertTrue(p1.equals(p2));         assertTrue(p1 == p2);     }      @Test public void divSemantics() {         Tag div = Tag.valueOf("div");         Tag p = Tag.valueOf("p");          assertTrue(div.canContain(div));         assertTrue(div.canContain(p));     }      @Test public void pSemantics() {         Tag div = Tag.valueOf("div");         Tag p = Tag.valueOf("p");         Tag img = Tag.valueOf("img");         Tag span = Tag.valueOf("span");          assertTrue(p.canContain(img));         assertTrue(p.canContain(span));         assertFalse(p.canContain(div));         assertFalse(p.canContain(p));     }      @Test public void spanSemantics() {         Tag span = Tag.valueOf("span");         Tag p = Tag.valueOf("p");         Tag div = Tag.valueOf("div");          assertTrue(span.canContain(span));         assertFalse(span.canContain(p));         assertFalse(span.canContain(div));     }      @Test public void imgSemantics() {         Tag img = Tag.valueOf("img");         Tag p = Tag.valueOf("p");          assertFalse(img.canContain(img));         assertFalse(img.canContain(p));     }      @Test public void defaultSemantics() {         Tag foo = Tag.valueOf("foo"); // not defined         Tag foo2 = Tag.valueOf("FOO");         Tag div = Tag.valueOf("div");          assertEquals(foo, foo2);         assertTrue(foo.canContain(foo));         assertTrue(foo.canContain(div));         assertTrue(div.canContain(foo));     }      @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotNull() {         Tag.valueOf(null);     }      @Test(expected = IllegalArgumentException.class) public void valueOfChecksNotEmpty() {         Tag.valueOf(" ");     } } 
package org.jsoup.safety;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.safety.Whitelist; import org.junit.Test; import static org.junit.Assert.*;  /**  Tests for the cleaner.   @author Jonathan Hedley, jonathan@hedley.net */ public class CleanerTest {     @Test public void simpleBehaviourTest() {         String h = "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>";         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());          assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));     }          @Test public void simpleBehaviourTest2() {         String h = "Hello <b>there</b>!";         String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());          assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));     }      @Test public void basicBehaviourTest() {         String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>";         String cleanHtml = Jsoup.clean(h, Whitelist.basic());          assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>",                 TextUtil.stripNewlines(cleanHtml));     }          @Test public void basicWithImagesTest() {         String h = "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>";         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());         assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\" /></p><p><img /></p>", TextUtil.stripNewlines(cleanHtml));     }          @Test public void testRelaxed() {         String h = "<h1>Head</h1><td>One<td>Two</td>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>", TextUtil.stripNewlines(cleanHtml));     }          @Test public void testDropComments() {         String h = "<p>Hello<!-- no --></p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Hello</p>", cleanHtml);     }          @Test public void testDropXmlProc() {         String h = "<?import namespace=\"xss\"><p>Hello</p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Hello</p>", cleanHtml);     }          @Test public void testDropScript() {         String h = "<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("", cleanHtml);     }          @Test public void testDropImageScript() {         String h = "<IMG SRC=\"javascript:alert('XSS')\">";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<img />", cleanHtml);     }          @Test public void testCleanJavascriptHref() {         String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<a>XSS</a>", cleanHtml);     }      @Test public void testDropsUnknownTags() {         String h = "<p><custom foo=true>Test</custom></p>";         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());         assertEquals("<p>Test</p>", cleanHtml);     }          @Test public void testHandlesEmptyAttributes() {         String h = "<img alt=\"\" src= unknown=''>";         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());         assertEquals("<img alt=\"\" />", cleanHtml);     }      @Test public void testIsValid() {         String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>";         String nok1 = "<p><script></script>Not <b>OK</b></p>";         String nok2 = "<p align=right>Test Not <b>OK</b></p>";         assertTrue(Jsoup.isValid(ok, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));         assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));     }          @Test public void resolvesRelativeLinks() {         String html = "<a href='/foo'>Link</a>";         String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basic());         assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>", clean);     }          @Test public void dropsUnresolvableRelativeLinks() {         String html = "<a href='/foo'>Link</a>";         String clean = Jsoup.clean(html, Whitelist.basic());         assertEquals("<a rel=\"nofollow\">Link</a>", clean);     } } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.TextUtil; import org.jsoup.nodes.Document; import org.junit.Test; import static org.junit.Assert.*;  /**  Tests for ElementList.   @author Jonathan Hedley, jonathan@hedley.net */ public class ElementsTest {     @Test public void filter() {         String h = "<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select(".headline").select("p");         assertEquals(2, els.size());         assertEquals("Hello", els.get(0).text());         assertEquals("There", els.get(1).text());     }      @Test public void attributes() {         String h = "<p title=foo><p title=bar><p class=foo><p class=bar>";         Document doc = Jsoup.parse(h);         Elements withTitle = doc.select("p[title]");         assertEquals(2, withTitle.size());         assertTrue(withTitle.hasAttr("title"));         assertFalse(withTitle.hasAttr("class"));         assertEquals("foo", withTitle.attr("title"));          withTitle.removeAttr("title");         assertEquals(2, withTitle.size()); // existing Elements are not reevaluated         assertEquals(0, doc.select("p[title]").size());          Elements ps = doc.select("p").attr("style", "classy");         assertEquals(4, ps.size());         assertEquals("classy", ps.last().attr("style"));         assertEquals("bar", ps.last().attr("class"));     }          @Test public void hasAttr() {         Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>");         Elements ps = doc.select("p");         assertTrue(ps.hasAttr("class"));         assertFalse(ps.hasAttr("style"));     }          @Test public void attr() {         Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>");         String classVal = doc.select("p").attr("class");         assertEquals("foo", classVal);     }      @Test public void classes() {         Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>");          Elements els = doc.select("p");         assertTrue(els.hasClass("red"));         assertFalse(els.hasClass("blue"));         els.addClass("blue");         els.removeClass("yellow");         els.toggleClass("mellow");          assertEquals("blue", els.get(0).className());         assertEquals("red green blue mellow", els.get(1).className());     }          @Test public void text() {         String h = "<div><p>Hello<p>there<p>world</div>";         Document doc = Jsoup.parse(h);         assertEquals("Hello there world", doc.select("div > *").text());     }      @Test public void hasText() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>");         Elements divs = doc.select("div");         assertTrue(divs.hasText());         assertFalse(doc.select("div + div").hasText());     }          @Test public void html() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>");         Elements divs = doc.select("div");         assertEquals("<p>Hello</p>\n<p>There</p>", divs.html());     }          @Test public void outerHtml() {         Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>");         Elements divs = doc.select("div");         assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml()));     }          @Test public void setHtml() {         Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>");         Elements ps = doc.select("p");                  ps.prepend("<b>Bold</b>").append("<i>Ital</i>");         assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()));                  ps.html("<span>Gone</span>");         assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml()));     }          @Test public void val() {         Document doc = Jsoup.parse("<input value='one' /><textarea>two</textarea>");         Elements els = doc.select("form > *");         assertEquals(2, els.size());         assertEquals("one", els.val());         assertEquals("two", els.last().val());                  els.val("three");         assertEquals("three", els.first().val());         assertEquals("three", els.last().val());         assertEquals("<textarea>three</textarea>", els.last().outerHtml());     }      @Test public void wrap() {         String h = "<p><b>This</b> is <b>jsoup</b></p>";         Document doc = Jsoup.parse(h);         doc.select("b").wrap("<i></i>");         assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html());     }          @Test public void eq() {         String h = "<p>Hello<p>there<p>world";         Document doc = Jsoup.parse(h);         assertEquals("there", doc.select("p").eq(1).text());     }          @Test public void is() {         String h = "<p>Hello<p title=foo>there<p>world";         Document doc = Jsoup.parse(h);         Elements ps = doc.select("p");         assertTrue(ps.is("[title=foo]"));         assertFalse(ps.is("[title=bar]"));     } } 
package org.jsoup.select;  import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.junit.Test; import static org.junit.Assert.*;  /**  Tests that the selector selects correctly.   @author Jonathan Hedley, jonathan@hedley.net */ public class SelectorTest {     @Test public void testByTag() {         Elements els = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>").select("div");         assertEquals(3, els.size());         assertEquals("1", els.get(0).id());         assertEquals("2", els.get(1).id());         assertEquals("3", els.get(2).id());          Elements none = Jsoup.parse("<div id=1><div id=2><p>Hello</p></div></div><div id=3>").select("span");         assertEquals(0, none.size());     }      @Test public void testById() {         Elements els = Jsoup.parse("<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>").select("#foo");         assertEquals(1, els.size());         assertEquals("Hello", els.get(0).text());          Elements none = Jsoup.parse("<div id=1></div>").select("#foo");         assertEquals(0, none.size());     }      @Test public void testByClass() {         Elements els = Jsoup.parse("<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>").select("p.one");         assertEquals(2, els.size());         assertEquals("0", els.get(0).id());         assertEquals("1", els.get(1).id());          Elements none = Jsoup.parse("<div class='one'></div>").select(".foo");         assertEquals(0, none.size());          Elements els2 = Jsoup.parse("<div class='one-two'></div>").select(".one-two");         assertEquals(1, els2.size());     }      @Test public void testByAttribute() {         String h = "<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />";         Document doc = Jsoup.parse(h);          Elements withTitle = doc.select("[title]");         assertEquals(4, withTitle.size());          Elements foo = doc.select("[title=foo]");         assertEquals(1, foo.size());          Elements not = doc.select("div[title!=bar]");         assertEquals(5, not.size());         assertEquals("Foo", not.first().attr("title"));          Elements starts = doc.select("[title^=ba]");         assertEquals(2, starts.size());         assertEquals("Bar", starts.first().attr("title"));         assertEquals("Bam", starts.last().attr("title"));          Elements ends = doc.select("[title$=am]");         assertEquals(2, ends.size());         assertEquals("Bam", ends.first().attr("title"));         assertEquals("SLAM", ends.last().attr("title"));          Elements contains = doc.select("[title*=a]");         assertEquals(3, contains.size());         assertEquals("Bar", contains.first().attr("title"));         assertEquals("SLAM", contains.last().attr("title"));     }      @Test public void testAllElements() {         String h = "<div><p>Hello</p><p><b>there</b></p></div>";         Document doc = Jsoup.parse(h);         Elements allDoc = doc.select("*");         Elements allUnderDiv = doc.select("div *");         assertEquals(8, allDoc.size());         assertEquals(3, allUnderDiv.size());         assertEquals("p", allUnderDiv.first().tagName());     }          @Test public void testAllWithClass() {         String h = "<p class=first>One<p class=first>Two<p>Three";         Document doc = Jsoup.parse(h);         Elements ps = doc.select("*.first");         assertEquals(2, ps.size());     }      @Test public void testGroupOr() {         String h = "<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("p,div,[title]");          assertEquals(5, els.size());         assertEquals("p", els.get(0).tagName());         assertEquals("div", els.get(1).tagName());         assertEquals("foo", els.get(1).attr("title"));         assertEquals("div", els.get(2).tagName());         assertEquals("bar", els.get(2).attr("title"));         assertEquals("div", els.get(3).tagName());         assertTrue(els.get(3).attr("title").length() == 0); // missing attributes come back as empty string         assertFalse(els.get(3).hasAttr("title"));         assertEquals("span", els.get(4).tagName());     }      @Test public void testGroupOrAttribute() {         String h = "<div id=1 /><div id=2 /><div title=foo /><div title=bar />";         Elements els = Jsoup.parse(h).select("[id],[title=foo]");          assertEquals(3, els.size());         assertEquals("1", els.get(0).id());         assertEquals("2", els.get(1).id());         assertEquals("foo", els.get(2).attr("title"));     }      @Test public void descendant() {         String h = "<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>";         Document doc = Jsoup.parse(h);         Elements els = doc.select(".head p");         assertEquals(2, els.size());         assertEquals("Hello", els.get(0).text());         assertEquals("There", els.get(1).text());          Elements p = doc.select("p.first");         assertEquals(1, p.size());         assertEquals("Hello", p.get(0).text());          Elements empty = doc.select("p .first"); // self, not descend, should not match         assertEquals(0, empty.size());     }          @Test public void and() {         String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div";         Document doc = Jsoup.parse(h);                  Elements div = doc.select("div.foo");         assertEquals(1, div.size());         assertEquals("div", div.first().tagName());                  Elements p = doc.select("div .foo"); // space indicates like "div *.foo"         assertEquals(1, p.size());         assertEquals("p", p.first().tagName());                  Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); // very specific!         assertEquals(1, div2.size());         assertEquals("div", div2.first().tagName());                  Elements p2 = doc.select("div *.foo"); // space indicates like "div *.foo"         assertEquals(1, p2.size());         assertEquals("p", p2.first().tagName());     }      @Test public void deeperDescendant() {         String h = "<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>";         Elements els = Jsoup.parse(h).select("div p .first");         assertEquals(1, els.size());         assertEquals("Hello", els.first().text());         assertEquals("span", els.first().tagName());     }      @Test public void parentChildElement() {         String h = "<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>";         Document doc = Jsoup.parse(h);          Elements divs = doc.select("div > div");         assertEquals(2, divs.size());         assertEquals("2", divs.get(0).id()); // 2 is child of 1         assertEquals("3", divs.get(1).id()); // 3 is child of 2          Elements div2 = doc.select("div#1 > div");         assertEquals(1, div2.size());         assertEquals("2", div2.get(0).id());     }          @Test public void parentWithClassChild() {         String h = "<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>";         Document doc = Jsoup.parse(h);                  Elements allAs = doc.select("h1 > a");         assertEquals(3, allAs.size());         assertEquals("a", allAs.first().tagName());                  Elements fooAs = doc.select("h1.foo > a");         assertEquals(2, fooAs.size());         assertEquals("a", fooAs.first().tagName());                  Elements barAs = doc.select("h1.foo > a.bar");         assertEquals(1, barAs.size());     }      @Test public void parentChildStar() {         String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>";         Document doc = Jsoup.parse(h);         Elements divChilds = doc.select("div > *");         assertEquals(3, divChilds.size());         assertEquals("p", divChilds.get(0).tagName());         assertEquals("p", divChilds.get(1).tagName());         assertEquals("span", divChilds.get(2).tagName());     }          @Test public void multiChildDescent() {         String h = "<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("div#foo > h1.bar > a[href*=example]");         assertEquals(1, els.size());         assertEquals("a", els.first().tagName());     }      @Test public void caseInsensitive() {         String h = "<dIv tItle=bAr><div>"; // mixed case so a simple toLowerCase() on value doesn't catch         Document doc = Jsoup.parse(h);          assertEquals(2, doc.select("DIV").size());         assertEquals(1, doc.select("DIV[TITLE]").size());         assertEquals(1, doc.select("DIV[TITLE=BAR]").size());         assertEquals(0, doc.select("DIV[TITLE=BARBARELLA").size());     }          @Test public void adjacentSiblings() {         String h = "<ol><li>One<li>Two<li>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li + li");         assertEquals(2, sibs.size());         assertEquals("Two", sibs.get(0).text());         assertEquals("Three", sibs.get(1).text());     }          @Test public void adjacentSiblingsWithId() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li#1 + li#2");         assertEquals(1, sibs.size());         assertEquals("Two", sibs.get(0).text());     }          @Test public void notAdjacent() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("li#1 + li#3");         assertEquals(0, sibs.size());     }          @Test public void mixCombinator() {         String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";         Document doc = Jsoup.parse(h);         Elements sibs = doc.select("body > div.foo li + li");                  assertEquals(2, sibs.size());         assertEquals("Two", sibs.get(0).text());         assertEquals("Three", sibs.get(1).text());     }          @Test public void mixCombinatorGroup() {         String h = "<div class=foo><ol><li>One<li>Two<li>Three</ol></div>";         Document doc = Jsoup.parse(h);         Elements els = doc.select(".foo > ol, ol > li + li");                  assertEquals(3, els.size());         assertEquals("ol", els.get(0).tagName());         assertEquals("Two", els.get(1).text());         assertEquals("Three", els.get(2).text());     }          @Test public void generalSiblings() {         String h = "<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>";         Document doc = Jsoup.parse(h);         Elements els = doc.select("#1 ~ #3");         assertEquals(1, els.size());         assertEquals("Three", els.first().text());     }          // for http://github.com/jhy/jsoup/issues#issue/10     @Test public void testCharactersInIdAndClass() {         // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)         String h = "<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>";         Document doc = Jsoup.parse(h);                  Element el1 = doc.getElementById("a1-foo_bar");         assertEquals("One", el1.text());         Element el2 = doc.getElementsByClass("b2-qux_bif").first();         assertEquals("Two", el2.text());                  Element el3 = doc.select("#a1-foo_bar").first();         assertEquals("One", el3.text());         Element el4 = doc.select(".b2-qux_bif").first();         assertEquals("Two", el4.text());     }          // for http://github.com/jhy/jsoup/issues#issue/13     @Test public void testSupportsLeadingCombinator() {         String h = "<div><p><span>One</span><span>Two</span></p></div>";         Document doc = Jsoup.parse(h);                  Element p = doc.select("div > p").first();         Elements spans = p.select("> span");         assertEquals(2, spans.size());         assertEquals("One", spans.first().text());                  // make sure doesn't get nested         h = "<div id=1><div id=2><div id=3></div></div></div>";         doc = Jsoup.parse(h);         Element div = doc.select("div").select(" > div").first();         assertEquals("2", div.id());     }          @Test public void testPseudoLessThan() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:lt(2)");         assertEquals(3, ps.size());         assertEquals("One", ps.get(0).text());         assertEquals("Two", ps.get(1).text());         assertEquals("Four", ps.get(2).text());     }          @Test public void testPseudoGreaterThan() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>");         Elements ps = doc.select("div p:gt(0)");         assertEquals(2, ps.size());         assertEquals("Two", ps.get(0).text());         assertEquals("Three", ps.get(1).text());     }          @Test public void testPseudoEquals() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:eq(0)");         assertEquals(2, ps.size());         assertEquals("One", ps.get(0).text());         assertEquals("Four", ps.get(1).text());                  Elements ps2 = doc.select("div:eq(0) p:eq(0)");         assertEquals(1, ps2.size());         assertEquals("One", ps2.get(0).text());         assertEquals("p", ps2.get(0).tagName());     }          @Test public void testPseudoBetween() {         Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>");         Elements ps = doc.select("div p:gt(0):lt(2)");         assertEquals(1, ps.size());         assertEquals("Two", ps.get(0).text());     }          @Test public void testPseudoCombined() {         Document doc = Jsoup.parse("<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>");         Elements ps = doc.select("div.foo p:gt(0)");         assertEquals(1, ps.size());         assertEquals("Two", ps.get(0).text());     } } 
