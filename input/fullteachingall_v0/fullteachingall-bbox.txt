#0.595#/**  *   */ package com.fullteaching.backend.unitary.user;  import java.util.Arrays;  import org.junit.Test; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.user.User;  /**  * @author gtunon  *  */ /*@Transactional After each test the BBDD is rolled back*/ // @Transactional not necessary here public class UserUnitaryTest extends AbstractUnitTest {  	/*Test user data*/ 	String name = "TestUser"; 	String password = "blablaba"; 	String nickName = "testi"; 	String picture = "picture/test.jpg"; 	String[] roles = {"STUDENT"}; 	 	 	/** 	 * Test method for {@link com.fullteaching.backend.user.User#User(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])} 	 * and {@link com.fullteaching.backend.user.User#User()}. 	 */ 	@Test 	public void newUserTest() { 		 		//Empty user 		User emptyUser = new User(); 		Assert.notNull(emptyUser, "User failed to be created"); 		 		//User with picture 		User u = new User(name, password, nickName, picture,roles); 		Assert.notNull(u, "User failed to be created"); 		Assert.isTrue(name.equals(u.getName()), "User failed to be created"); 		Assert.isTrue((new BCryptPasswordEncoder()).matches(password, u.getPasswordHash()), "User failed to be created"); 		Assert.isTrue(nickName.equals(u.getNickName()), "User failed to be created"); 		Assert.isTrue(picture.equals(u.getPicture()), "User failed to be created"); 		Assert.isTrue(roles.length == u.getRoles().size(), "User failed to be created"); 		 		//user witout picture 		u = new User(name, password, nickName, null,roles); 		Assert.notNull(u, "User failed to be created"); 		Assert.isTrue(name.equals(u.getName()), "User failed to be created"); 		Assert.isTrue((new BCryptPasswordEncoder()).matches(password, u.getPasswordHash()), "User failed to be created"); 		Assert.isTrue(nickName.equals(u.getNickName()), "User failed to be created"); 		Assert.notNull(u.getPicture(), "User failed to be created"); 		Assert.isTrue(roles.length == u.getRoles().size(), "User failed to be created"); 	}  	/** 	 * Test method for {@link com.fullteaching.backend.user.User#getName()}. 	 * and {@link com.fullteaching.backend.user.User#setName(java.lang.String)}. 	 */ 	@Test 	public void setAndGetUserNameTest() { 		User u = new User(); 		u.setName(name); 		Assert.isTrue(name.equals(u.getName()), "testSetAndGetUserName FAIL"); 	}   	/** 	 * Test method for {@link com.fullteaching.backend.user.User#setPasswordHash(java.lang.String)} 	 * and {@link com.fullteaching.backend.user.User#getPasswordHash()}. 	 */ 	@Test 	public void setAndGetHashPasswordTest() { 		User u = new User(); 		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(); 		u.setPasswordHash(encoder.encode(password)); 		Assert.isTrue(encoder.matches(password, u.getPasswordHash()), "setAndGetHashPasswordTest FAIL"); 	} 	 	/** 	 * Test method for {@link com.fullteaching.backend.user.User#getRoles()} 	 * and  {@link com.fullteaching.backend.user.User#setRoles(java.util.List)}. 	 */ 	@Test 	public void setAndGetUserRolesTest() { 		User u = new User();	 		u.setRoles(Arrays.asList(roles)); 		Assert.isTrue(roles.length == u.getRoles().size(), "SetAndGetUserRolesTest FAIL"); 	}  	/** 	 * Test method for {@link com.fullteaching.backend.user.User#getNickName()}  	 * and {@link com.fullteaching.backend.user.User#setNickName(java.lang.String)}. 	 */ 	@Test 	public void setAndGetUserNickNameTest() { 		User u = new User(); 		u.setNickName(nickName); 		Assert.isTrue(nickName.equals(u.getNickName()), "SetAndGetUserNickNameTest FAIL"); 	}  	/** 	 * Test method for {@link com.fullteaching.backend.user.User#getPicture()}  	 * and {@link com.fullteaching.backend.user.User#setPicture(java.lang.String)}. 	 */ 	@Test 	public void setAndGetUserPictureTest() { 		User u = new User(); 		u.setPicture(picture); 		Assert.isTrue(picture.equals(u.getPicture()), "SetAndGetUserPictureTest FAIL"); 	}  	/** 	 * Test method for {@link com.fullteaching.backend.user.User#getRegistrationDate()}  	 * and {@link com.fullteaching.backend.user.User#setRegistrationDate(long)}. 	 */ 	@Test 	public void setAndGetUserRegistrationDateTest() { 		User u = new User(); 		Long date = System.currentTimeMillis(); 		u.setRegistrationDate(date); 		Assert.isTrue(date==u.getRegistrationDate()); 	}   	/** 	 * Test method for {@link com.fullteaching.backend.user.User#equals(java.lang.Object)}. 	 */ 	@Test 	public void equalUserTest() { 		User u1 = new User(name, password, nickName, picture,roles); 		User u2 = new User(name, password, nickName, picture,roles); 		Assert.isTrue(u1.equals(u2), "EqualUserTest FAIL"); 		Assert.isTrue(!u1.equals("not An User"), "EqualUserTest FAIL"); 		Assert.isTrue(u1.equals(u1), "EqualUserTest FAIL");		 		Assert.isTrue(!u1.equals(null), "EqualUserTest FAIL"); 	}    } 
#20.764#/*  * (C) Copyright 2017 OpenVidu (http://openvidu.io/)  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */  package com.fullteaching.backend.e2e;  import java.util.List;  import org.junit.jupiter.api.AfterEach; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Tag; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.TestInfo; import org.junit.jupiter.api.extension.ExtendWith; import org.junit.runner.RunWith; import org.junit.platform.runner.JUnitPlatform; import org.openqa.selenium.By; import org.openqa.selenium.WebElement; import org.openqa.selenium.support.ui.ExpectedConditions;  import io.github.bonigarcia.SeleniumExtension;  /**  * E2E tests for FullTeaching REST CRUD operations.  *  * @author Pablo Fuente (pablo.fuente@urjc.es)  */ @Tag("e2e") @DisplayName("E2E tests for FullTeaching REST CRUD operations") @ExtendWith(SeleniumExtension.class) @RunWith(JUnitPlatform.class) public class FullTeachingTestE2EREST extends FullTeachingTestE2E {  	private static String BROWSER;  	final String TEST_COURSE = "TEST_COURSE"; 	final String TEST_COURSE_INFO = "TEST_COURSE_INFO"; 	final String EDITED = " EDITED";  	final String TEACHER_MAIL = "teacher@gmail.com"; 	final String TEACHER_PASS = "pass"; 	final String TEACHER_NAME = "Teacher Cheater";  	String COURSE_NAME = TEST_COURSE;  	static Exception ex = null;  	BrowserUser user;  	public FullTeachingTestE2EREST() { 		super(); 	}  	/*** ClassRule methods ***/  	@BeforeAll() 	static void setupAll() { 		BROWSER = System.getenv("BROWSER");  		if ((BROWSER == null) || (!BROWSER.equals(FIREFOX))) { 			BROWSER = CHROME; 		}  		log.info("Using URL {} to connect to openvidu-testapp", APP_URL); 	}  	@BeforeEach 	void setup(TestInfo info) {  		log.info("##### Start test: " + info.getTestMethod().get().getName());  		loginTeacher(info); // Teacher login 		addCourse(COURSE_NAME); // Add test course 	}  	@AfterEach 	void dispose(TestInfo info) { 		try { 			this.deleteCourseIfExist(); 			this.logout(user); 			user.dispose(); 		} finally { 			log.info("##### Finish test: " + info.getTestMethod().get().getName()); 		} 	}  	/*** Test methods ***/  	/*@Test 	void courseRestOperations() throws Exception {  		// Edit course  		log.info("Editing course");  		COURSE_NAME = COURSE_NAME + EDITED;  		List<WebElement> l = user.getDriver().findElements(By.className("course-put-icon")); 		openDialog(l.get(l.size() - 1), user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("input-put-course-name"))), 				"Input for course name not clickable"); 		user.getDriver().findElement(By.id("input-put-course-name")).clear(); 		user.getDriver().findElement(By.id("input-put-course-name")).sendKeys(COURSE_NAME); 		user.getDriver().findElement(By.id("submit-put-course-btn")).click();  		waitForDialogClosed("course-modal", "Edition of course failed", user);  		user.waitUntil( 				ExpectedConditions.textToBe( 						By.cssSelector("#course-list .course-list-item:last-child div.course-title span"), COURSE_NAME), 				"Unexpected course name");  	}  	@Test 	void courseInfoRestOperations() throws Exception {  		// Empty course info 		enterCourseAndNavigateTab(COURSE_NAME, "info-tab-icon"); 		user.waitUntil(ExpectedConditions.presenceOfNestedElementLocatedBy(By.cssSelector(".md-tab-body.md-tab-active"), 				By.cssSelector(".card-panel.warning")), "Course info wasn't empty");  		log.info("Editing course information");  		// Edit course info 		user.getDriver().findElement(By.id("edit-course-info")).click(); 		user.getDriver().findElement(By.className("ql-editor")).sendKeys(TEST_COURSE_INFO); 		user.getDriver().findElement(By.id("send-info-btn")).click(); 		waitForAnimations();  		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".ql-editor p"), TEST_COURSE_INFO), 				"Unexpected course info");  		log.info("Course information succesfully updated");  	}  	@Test 	void sessionRestOperations() throws Exception {  		// Add new session  		enterCourseAndNavigateTab(COURSE_NAME, "sessions-tab-icon");  		log.info("Adding new session");  		openDialog("#add-session-icon", user);  		// Find form elements 		WebElement titleField = user.getDriver().findElement(By.id("input-post-title")); 		WebElement commentField = user.getDriver().findElement(By.id("input-post-comment")); 		WebElement dateField = user.getDriver().findElement(By.id("input-post-date")); 		WebElement timeField = user.getDriver().findElement(By.id("input-post-time"));  		String title = "TEST LESSON NAME"; 		String comment = "TEST LESSON COMMENT";  		// Fill input fields 		titleField.sendKeys(title); 		commentField.sendKeys(comment);  		if (BROWSER.equals("chrome")) { 			dateField.sendKeys("03-01-2018"); 			timeField.sendKeys("03:10PM"); 		} else if (BROWSER.equals("firefox")) { 			dateField.sendKeys("2018-03-01"); 			timeField.sendKeys("15:10"); 		}  		user.getDriver().findElement(By.id("post-modal-btn")).click();  		waitForDialogClosed("course-details-modal", "Addition of session failed", user);  		// Check fields of added session  		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-title"), title), 				"Unexpected session title"); 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-description"), comment), 				"Unexpected session description"); 		user.waitUntil( 				ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-datetime"), "Mar 1, 2018 - 15:10"), 				"Unexpected session date-time");  		log.info("New session successfully added");  		// Edit session 		log.info("Editing session");  		openDialog(".edit-session-icon", user);  		// Find form elements 		titleField = user.getDriver().findElement(By.id("input-put-title")); 		commentField = user.getDriver().findElement(By.id("input-put-comment")); 		dateField = user.getDriver().findElement(By.id("input-put-date")); 		timeField = user.getDriver().findElement(By.id("input-put-time"));  		// Clear elements 		titleField.clear(); 		commentField.clear();  		// Fill edited input fields 		titleField.sendKeys(title + EDITED); 		commentField.sendKeys(comment + EDITED);  		if (BROWSER.equals("chrome")) { 			dateField.sendKeys("04-02-2019"); 			timeField.sendKeys("05:10AM"); 		} else if (BROWSER.equals("firefox")) { 			dateField.sendKeys("2019-04-02"); 			timeField.sendKeys("05:10"); 		}  		user.getDriver().findElement(By.id("put-modal-btn")).click();  		waitForDialogClosed("put-delete-modal", "Edition of session failed", user);  		// Check fields of edited session 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-title"), title + EDITED), 				"Unexpected session title"); 		user.waitUntil( 				ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-description"), comment + EDITED), 				"Unexpected session description"); 		user.waitUntil( 				ExpectedConditions.textToBe(By.cssSelector("li.session-data .session-datetime"), "Apr 2, 2019 - 05:10"), 				"Unexpected session date-time");  		log.info("Session succesfully edited");  		// Delete session 		log.info("Deleting session");  		openDialog(".edit-session-icon", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("label-delete-checkbox"))), 				"Checkbox for session deletion not clickable"); 		user.getDriver().findElement(By.id("label-delete-checkbox")).click(); 		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("delete-session-btn"))), 				"Button for session deletion not clickable"); 		user.getDriver().findElement(By.id("delete-session-btn")).click();  		waitForDialogClosed("put-delete-modal", "Deletion of session failed", user);  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.cssSelector("li.session-data"), 0), 				"Unexpected number of sessions");  		log.info("Session successfully deleted");  	}*/  	@Test 	void forumRestOperations() throws Exception {  		// Add new entry to the forum  		enterCourseAndNavigateTab(COURSE_NAME, "forum-tab-icon");  		log.info("Adding new entry to the forum");  		openDialog("#add-entry-icon", user);  		// Find form elements 		WebElement titleField = user.getDriver().findElement(By.id("input-post-title")); 		WebElement commentField = user.getDriver().findElement(By.id("input-post-comment"));  		String title = "TEST FORUM ENTRY"; 		String comment = "TEST FORUM COMMENT"; 		String entryDate = "a few seconds ago";  		// Fill input fields 		titleField.sendKeys(title); 		commentField.sendKeys(comment);  		user.getDriver().findElement(By.id("post-modal-btn")).click();  		waitForDialogClosed("course-details-modal", "Addition of entry failed", user);  		// Check fields of new entry 		WebElement entryEl = user.getDriver().findElement(By.cssSelector("li.entry-title"));  		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-title"), title), 				"Unexpected entry title in the forum"); 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-author"), TEACHER_NAME), 				"Unexpected entry author in the forum"); 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("li.entry-title .forum-entry-date"), entryDate), 				"Unexpected entry date in the forum");  		log.info("New entry successfully added to the forum");  		log.info("Entering the new entry");  		entryEl.click();  		user.waitUntil(ExpectedConditions.textToBe( 				By.cssSelector(".comment-block > app-comment:first-child > div.comment-div .message-itself"), 				comment), "Unexpected entry title in the entry details view"); 		user.waitUntil(ExpectedConditions.textToBe( 				By.cssSelector(".comment-block > app-comment:first-child > div.comment-div .forum-comment-author"), 				TEACHER_NAME), "Unexpected entry author in the entry details view");  		// Comment reply  		log.info("Adding new replay to the entry's only comment");  		String reply = "TEST FORUM REPLY"; 		openDialog(".replay-icon", user); 		commentField = user.getDriver().findElement(By.id("input-post-comment")); 		commentField.sendKeys(reply);  		user.getDriver().findElement(By.id("post-modal-btn")).click();  		waitForDialogClosed("course-details-modal", "Addition of entry reply failed", user);  		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector( 				".comment-block > app-comment:first-child > div.comment-div div.comment-div .message-itself"), 				reply), "Unexpected reply message in the entry details view"); 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector( 				".comment-block > app-comment:first-child > div.comment-div div.comment-div .forum-comment-author"), 				TEACHER_NAME), "Unexpected reply author in the entry details view");  		log.info("Replay sucessfully added");  		// Forum deactivation  		user.getDriver().findElement(By.id("entries-sml-btn")).click();  		log.info("Deactivating forum");  		openDialog("#edit-forum-icon", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("label-forum-checkbox"))), 				"Checkbox for forum deactivation not clickable"); 		user.getDriver().findElement(By.id("label-forum-checkbox")).click(); 		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("put-modal-btn"))), 				"Button for forum deactivation not clickable"); 		user.getDriver().findElement(By.id("put-modal-btn")).click();  		waitForDialogClosed("put-delete-modal", "Deactivation of forum failed", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")), 				"Warning card (forum deactivated) missing");  		log.info("Forum successfully deactivated");  	}  	/*@Test 	void filesRestOperations() throws Exception {  		enterCourseAndNavigateTab(COURSE_NAME, "files-tab-icon");  		log.info("Checking that there are no files in the course");  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")), 				"Warning card (course with no files) missing");  		log.info("Adding new file group");  		openDialog("#add-files-icon", user);  		String fileGroup = "TEST FILE GROUP";  		// Find form elements 		WebElement titleField = user.getDriver().findElement(By.id("input-post-title")); 		titleField.sendKeys(fileGroup);  		user.getDriver().findElement(By.id("post-modal-btn")).click();  		waitForDialogClosed("course-details-modal", "Addition of file group failed", user);  		// Check fields of new file group 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".file-group-title h5"), fileGroup), 				"Unexpected file group name");  		log.info("File group successfully added");  		// Edit file group 		log.info("Editing file group");  		openDialog("#edit-filegroup-icon", user);  		// Find form elements 		titleField = user.getDriver().findElement(By.id("input-file-title")); 		titleField.clear(); 		titleField.sendKeys(fileGroup + EDITED);  		user.getDriver().findElement(By.id("put-modal-btn")).click();  		waitForDialogClosed("put-delete-modal", "Edition of file group failed", user);  		// Check fields of edited file group 		user.waitUntil( 				ExpectedConditions.textToBe(By.cssSelector("app-file-group .file-group-title h5"), fileGroup + EDITED), 				"Unexpected file group name");  		log.info("File group successfully edited");  		// Add file subgroup 		log.info("Adding new file sub-group");  		String fileSubGroup = "TEST FILE SUBGROUP"; 		openDialog(".add-subgroup-btn", user); 		titleField = user.getDriver().findElement(By.id("input-post-title")); 		titleField.sendKeys(fileSubGroup);  		user.getDriver().findElement(By.id("post-modal-btn")).click();  		waitForDialogClosed("course-details-modal", "Addition of file sub-group failed", user);  		// Check fields of new file subgroup 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .file-group-title h5"), 				fileSubGroup), "Unexpected file sub-group name");  		log.info("File sub-group successfully added");  		log.info("Adding new file to sub-group");  		openDialog("app-file-group app-file-group .add-file-btn", user);  		WebElement fileUploader = user.getDriver().findElement(By.className("input-file-uploader"));  		String fileName = "testFile.txt";  		log.info("Uploading file located on path '{}'", 				System.getProperty("user.dir") + "/src/test/resources/" + fileName);  		user.runJavascript("arguments[0].setAttribute('style', 'display:block')", fileUploader); 		user.waitUntil( 				ExpectedConditions.presenceOfElementLocated(By.xpath( 						"//input[contains(@class, 'input-file-uploader') and contains(@style, 'display:block')]")), 				"Waiting for the input file to be displayed");  		fileUploader.sendKeys(System.getProperty("user.dir") + "/src/test/resources/" + fileName);  		user.getDriver().findElement(By.id("upload-all-btn")).click();  		// Wait for upload 		user.waitUntil( 				ExpectedConditions.presenceOfElementLocated( 						By.xpath("//div[contains(@class, 'determinate') and contains(@style, 'width: 100')]")), 				"Upload process not completed. Progress bar not filled");  		user.waitUntil(ExpectedConditions.textToBe(By.xpath("//i[contains(@class, 'icon-status-upload')]"), "done"), 				"Upload process failed");  		log.info("File upload successful");  		// Close dialog 		user.getDriver().findElement(By.id("close-upload-modal-btn")).click(); 		waitForDialogClosed("course-details-modal", "Upload of file failed", user);  		// Check new uploaded file 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .chip .file-name-div"), 				fileName), "Unexpected uploaded file name");  		log.info("File succesfully added");  		// Edit file 		log.info("Editing file");  		openDialog("app-file-group app-file-group .edit-file-name-icon", user); 		titleField = user.getDriver().findElement(By.id("input-file-title")); 		titleField.clear();  		String editedFileName = "testFileEDITED.txt";  		titleField.sendKeys(editedFileName); 		user.getDriver().findElement(By.id("put-modal-btn")).click(); 		waitForDialogClosed("put-delete-modal", "Edition of file failed", user);  		// Check edited file name 		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector("app-file-group app-file-group .chip .file-name-div"), 				editedFileName), "Unexpected uploaded file name");  		log.info("File successfully edited");  		// Delete file group 		log.info("Deleting file-group");  		user.getDriver().findElement(By.cssSelector("app-file-group .delete-filegroup-icon")).click(); 		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.warning")), 				"Warning card (course with no files) missing");  		log.info("File group successfully deleted");  	}  	@Test 	void attendersRestOperations() throws Exception {  		enterCourseAndNavigateTab(COURSE_NAME, "attenders-tab-icon");  		log.info("Checking that there is only one attender to the course");  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1), 				"Unexpected number of attenders for the course");  		user.waitUntil(ExpectedConditions.textToBe(By.cssSelector(".attender-row-div .attender-name-p"), TEACHER_NAME), 				"Unexpected name for the attender");  		// Add attender fail 		log.info("Adding attender (should FAIL)");  		openDialog("#add-attenders-icon", user);  		String attenderName = "studentFail@gmail.com";  		WebElement titleField = user.getDriver().findElement(By.id("input-attender-simple")); 		titleField.sendKeys(attenderName);  		user.getDriver().findElement(By.id("put-modal-btn")).click(); 		waitForDialogClosed("put-delete-modal", "Addition of attender fail", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.fail")), 				"Error card (attender not added to the course) missing");  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1), 				"Unexpected number of attenders for the course");  		user.getDriver().findElement(By.cssSelector("app-error-message .card-panel.fail .material-icons")).click();  		log.info("Attender addition successfully failed");  		// Add attender success 		log.info("Adding attender (should SUCCESS)");  		openDialog("#add-attenders-icon", user);  		attenderName = "student1@gmail.com";  		titleField = user.getDriver().findElement(By.id("input-attender-simple")); 		titleField.sendKeys(attenderName);  		user.getDriver().findElement(By.id("put-modal-btn")).click(); 		waitForDialogClosed("put-delete-modal", "Addition of attender failed", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector("app-error-message .card-panel.correct")), 				"Success card (attender properly added to the course) missing");  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 2), 				"Unexpected number of attenders for the course");  		user.getDriver().findElement(By.cssSelector("app-error-message .card-panel.correct .material-icons")).click();  		log.info("Attender addition successfully finished");  		// Remove attender 		log.info("Removing attender");  		user.getDriver().findElement(By.id("edit-attenders-icon")).click(); 		user.waitUntil(ExpectedConditions.elementToBeClickable(By.cssSelector(".del-attender-icon")), 				"Button for attender deletion not clickable"); 		user.getDriver().findElement(By.cssSelector(".del-attender-icon")).click(); 		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.className("attender-row-div"), 1), 				"Unexpected number of attenders for the course");  		log.info("Attender successfully removed");  	}  	/*** Auxiliary methods ***/  	private void loginTeacher(TestInfo info) { 		this.user = setupBrowser(BROWSER, info, "TestUser", 15); 		this.quickLogin(user, TEACHER_MAIL, TEACHER_PASS); 	}  	private void addCourse(String courseName) { 		log.info("Adding test course");  		int numberOfCourses = user.getDriver().findElements(By.className("course-list-item")).size();  		openDialog("#add-course-icon", user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("input-post-course-name"))), 				"Input for course name not clickable"); 		user.getDriver().findElement(By.id("input-post-course-name")).sendKeys(courseName); 		user.getDriver().findElement(By.id("submit-post-course-btn")).click();  		waitForDialogClosed("course-modal", "Addition of course failed", user);  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.cssSelector("#course-list .course-list-item"), 				numberOfCourses + 1), "Unexpected number of courses"); 		user.waitUntil( 				ExpectedConditions.textToBe( 						By.cssSelector("#course-list .course-list-item:last-child div.course-title span"), courseName), 				"Unexpected name for the new course"); 	}  	private void deleteCourse(String courseName) { 		log.info("Deleting test course");  		List<WebElement> allCourses = user.getDriver().findElements(By.className("course-list-item")); 		int numberOfCourses = allCourses.size(); 		WebElement course = null; 		for (WebElement c : allCourses) { 			WebElement innerTitleSpan = c.findElement(By.cssSelector("div.course-title span")); 			if (innerTitleSpan.getText().equals(courseName)) { 				course = c; 				break; 			} 		}  		WebElement editIcon = course.findElement(By.className("course-put-icon")); 		openDialog(editIcon, user);  		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("label-delete-checkbox"))), 				"Checkbox for course deletion not clickable"); 		user.getDriver().findElement(By.id("label-delete-checkbox")).click(); 		user.waitUntil(ExpectedConditions.elementToBeClickable(By.id(("delete-course-btn"))), 				"Button for course deletion not clickable"); 		user.getDriver().findElement(By.id("delete-course-btn")).click();  		waitForDialogClosed("put-delete-course-modal", "Deletion of course failed", user);  		user.waitUntil(ExpectedConditions.numberOfElementsToBe(By.cssSelector("#course-list .course-list-item"), 				numberOfCourses - 1), "Unexpected number of courses"); 		user.waitUntil( 				ExpectedConditions.not(ExpectedConditions.textToBe( 						By.cssSelector("#course-list .course-list-item:last-child div.course-title span"), courseName)), 				"Unexpected name for the last of the courses"); 	}  	private void enterCourseAndNavigateTab(String courseName, String tabId) {  		log.info("Entering course {}", courseName);  		List<WebElement> allCourses = user.getDriver() 				.findElements(By.cssSelector("#course-list .course-list-item div.course-title span")); 		WebElement courseSpan = null; 		for (WebElement c : allCourses) { 			if (c.getText().equals(courseName)) { 				courseSpan = c; 				break; 			} 		}  		courseSpan.click();  		user.waitUntil(ExpectedConditions.textToBe(By.id("main-course-title"), courseName), "Unexpected course title");  		log.info("Navigating to tab by clicking icon with id '{}'", tabId);  		user.getDriver().findElement(By.id(tabId)).click();  		waitForAnimations(); 	}  	private void deleteCourseIfExist() { 		user.getDriver().get(APP_URL); 		user.waitUntil(ExpectedConditions.presenceOfElementLocated(By.id(("course-list"))), "Course list not present");  		List<WebElement> allCourses = user.getDriver().findElements(By.className("course-list-item")); 		WebElement course = null; 		for (WebElement c : allCourses) { 			WebElement innerTitleSpan = c.findElement(By.cssSelector("div.course-title span")); 			if (innerTitleSpan.getText().equals(COURSE_NAME)) { 				course = c; 				break; 			} 		}  		if (course != null) { 			this.deleteCourse(COURSE_NAME); 		} 	}  } 
#2.215#package com.fullteaching.backend.integration.session;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.session.Session; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.utils.SessionTestUtils; import com.google.gson.Gson;  public class SessionControllerTest extends AbstractLoggedControllerUnitTest { 	 	private static String newSession_uri="/api-sessions/course/"; 	private static String editSession_uri="/api-sessions/edit"; 	private static String deleteSession_uri="/api-sessions/delete/"; 	 	@Before 	public void setUp() { 		super.setUp(); 	}  	@Test 	public void newSessionTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		Long date = System.currentTimeMillis(); 		Session s = new Session("Mock Session", "this descriptions", date, c); 		 		Gson gson = new Gson(); 		String request = gson.toJson(s); 		//test ok ; 		try { 			MvcResult result =  mvc.perform(post(newSession_uri+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(post(newSession_uri+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(post(newSession_uri+"not_a_id") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 	}  	@Test 	public void modifySessionTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		Long date = System.currentTimeMillis(); 		Session s = new Session("Mock Session", "this descriptions", date, c); 		 		c = SessionTestUtils.newSession(mvc, s, c, httpSession); 		 		Session toChange = (Session)c.getSessions().toArray()[0]; 		 		toChange.setDate(System.currentTimeMillis()); 		toChange.setTitle("MODIFIED"); 		Gson gson = new Gson(); 		 		String request = gson.toJson(toChange); 		 		//test ok ; 		try { 			MvcResult result =  mvc.perform(put(editSession_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(put(editSession_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(put(editSession_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 	}  	@Test 	public void deleteSessionTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		Long date = System.currentTimeMillis(); 		Session s = new Session("Mock Session", "this descriptions", date, c); 		 		c = SessionTestUtils.newSession(mvc, s, c, httpSession); 		 		long sessionId = ((Session)c.getSessions().toArray()[0]).getId();  		 		//test ok ; 		try { 			MvcResult result =  mvc.perform(delete(deleteSession_uri+sessionId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(delete(deleteSession_uri+sessionId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(delete(deleteSession_uri+"not_a_id") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		//Course ==null hasn't been found... 	}  } 
#0.23#package com.fullteaching.backend.unitary.filegroup;   import java.util.ArrayList; import java.util.List;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.file.File; import com.fullteaching.backend.filegroup.FileGroup;  public class FileGroupUnitaryTest extends AbstractUnitTest {  	private static String filegroup_name="FileGroup"; 	static int filetype = 0; 	static String filename = "FileNAME.doc"; 	 	@Before 	public void setUp() throws Exception { 	}  	@Test 	public void testFileGroup() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		FileGroup fg2 = new FileGroup(filegroup_name); 		Assert.notNull(fg2); 		Assert.isTrue(filegroup_name.equals(fg2.getTitle())); 		 		FileGroup fg3 = new FileGroup(filegroup_name,fg2); 		Assert.notNull(fg3); 		Assert.isTrue(filegroup_name.equals(fg3.getTitle())); 		Assert.notNull(fg3.getFileGroupParent()); 		Assert.isTrue(fg2.equals(fg3.getFileGroupParent()));  	}  	@Test 	public void setAndGetFileGroupIdTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		fg1.setId(1); 		Assert.isTrue(1==fg1.getId()); 	}  	@Test 	public void setAndGetTitleTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		fg1.setTitle(filegroup_name); 		Assert.isTrue(filegroup_name.equals(fg1.getTitle())); 	}  	@Test 	public void setAndGetFilesTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		List<File> files = new ArrayList<File>(); 		files.add( new File (filetype, filename)); 		fg1.setFiles(files); 		 		Assert.isTrue(fg1.getFiles().size()==1); 		 	}  	@Test 	public void setAndGetFileGroupsTest() { 		List<FileGroup> groups = new ArrayList<FileGroup>(); 		groups.add(new FileGroup(filegroup_name+"2")); 		groups.add(new FileGroup(filegroup_name+"3")); 		 		FileGroup fg3 = new FileGroup(); 		Assert.notNull(fg3); 		 		fg3.setFileGroups(groups); 		 		Assert.isTrue(fg3.getFileGroups().size()==2); 	}  	@Test 	public void setAndGetFileGroupParentTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		FileGroup fg2 = new FileGroup(filegroup_name); 		Assert.notNull(fg2); 		Assert.isTrue(filegroup_name.equals(fg2.getTitle())); 		 		fg1.setFileGroupParent(fg2); 		Assert.notNull(fg1.getFileGroupParent()); 		Assert.isTrue(fg2.equals(fg1.getFileGroupParent())); 	}  	@Test 	public void fileGroupEqualTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		fg1.setId(1); 		FileGroup fg2 = new FileGroup(filegroup_name); 		Assert.notNull(fg2); 		fg2.setId(2); 		FileGroup fg3 = new FileGroup(filegroup_name); 		Assert.notNull(fg3); 		fg3.setId(1); 		 		Assert.isTrue(!fg1.equals(null)); 		Assert.isTrue(!fg1.equals("not a group")); 		Assert.isTrue(!fg1.equals(fg2)); 		Assert.isTrue(fg1.equals(fg3)); 		 	}  	@Test 	public void updateFileIndexOrderTest() { 		FileGroup fg1 = new FileGroup(); 		Assert.notNull(fg1); 		 		List<File> files = new ArrayList<File>(); 		files.add( new File (filetype, filename)); 		files.add( new File (filetype, filename+"2")); 		fg1.setFiles(files); 		 		fg1.updateFileIndexOrder(); 		 		List<File> list = fg1.getFiles();  		Assert.isTrue(list.get(0).getIndexOrder()==0); 		Assert.isTrue(list.get(1).getIndexOrder()==1); 		 	}  } 
#0.169#package com.fullteaching.backend.unitary.session;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.session.Session; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.user.User;  public class SessionUnitaryTest extends AbstractUnitTest {  	private static String title = "Session Title"; 	private static String description = "Session Description"; 	 	@Before 	public void setUp() throws Exception { 	}  	@Test 	public void newSessionTest() { 		//Empty Session 		Session emptySession = new Session(); 		Assert.notNull(emptySession); 		 		//Not empty 		Long date = System.currentTimeMillis(); 		Session session = new Session(title, description, date); 		Assert.notNull(session); 		Assert.isTrue(date == session.getDate()); 		Assert.isTrue(title.equals(session.getTitle())); 		Assert.isTrue(description.equals(session.getDescription())); 		 		//with course  		String[] roles = {"STUDENT"}; 		User u = new User("mock_teacher","mock2222","t_mocky", null,roles); 		Course c= CourseTestUtils.newCourseWithCd("course", u, null, "this is the info", false); 		 		Session c_session = new Session(title, description, date, c); 		Assert.notNull(c_session); 		Assert.isTrue(date == c_session.getDate()); 		Assert.isTrue(title.equals(c_session.getTitle())); 		Assert.isTrue(description.equals(c_session.getDescription())); 		Assert.isTrue(c.equals(c_session.getCourse())); 	}   	@Test 	public void setAndGetSessionTitleTest() { 		Session session = new Session(); 		session.setTitle(title); 		Assert.notNull(session); 		Assert.isTrue(title.equals(session.getTitle())); 	}  	@Test 	public void setAndGetSessionDescriptionTest() { 		Session session = new Session(); 		session.setDescription(description); 		Assert.notNull(session); 		Assert.isTrue(description.equals(session.getDescription())); 	}  	@Test 	public void setAndGetSessionDateTest() { 		Session session = new Session(); 		Long date = System.currentTimeMillis(); 		session.setDate(date); 		Assert.notNull(session); 		Assert.isTrue(date == session.getDate());	 	}  	@Test 	public void setAndGetSessionCourseTest() { 		String[] roles = {"STUDENT"}; 		User u = new User("mock_teacher","mock2222","t_mocky", null,roles); 		Course c= CourseTestUtils.newCourseWithCd("course", u, null, "this is the info", false); 		 		Session session = new Session(); 		session.setCourse(c); 		Assert.notNull(session); 		Assert.isTrue(c.equals(session.getCourse()));		 	}  	@Test 	public void equalSessionTest() { 		Session session1 = new Session(); 		session1.setId(1); 		Session session2 = new Session(); 		session2.setId(1); 		Session session3 = new Session(); 		session3.setId(2); 		Assert.notNull(session1); 		Assert.notNull(session2); 		Assert.notNull(session3); 		Assert.isTrue(session1.equals(session2));	 		Assert.isTrue(session1.equals(session1)); 		Assert.isTrue(!session1.equals(null)); 		Assert.isTrue(!session1.equals("not_a_session")); 		Assert.isTrue(!session1.equals(session3)); 		 	}  } 
#0.301#package com.fullteaching.backend.unitary.comment;   import java.util.ArrayList; import java.util.List;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.comment.Comment; import com.fullteaching.backend.user.User;  public class CommentUnitaryTest extends AbstractUnitTest {  	@Before 	public void setUp() throws Exception { 	}  	@Test 	public void newForumEntryCommentTest() { 		Comment cm = new Comment(); 		Assert.notNull(cm); 		 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles); 		Long date = System.currentTimeMillis(); 		String message = "This is the message"; 		Comment cm2 = new Comment(message, date, u); 	 		Assert.notNull(cm2); 		Assert.notNull(cm2.getReplies()); 		Assert.isTrue(u.equals(cm2.getUser())); 		Assert.isTrue(date== cm2.getDate()); 		Assert.isTrue(message.equals(cm2.getMessage())); 		 		Comment cm3 = new Comment(message, date, u, cm2); 		 		Assert.notNull(cm3); 		Assert.notNull(cm3.getReplies()); 		Assert.isTrue(u.equals(cm3.getUser())); 		Assert.isTrue(date== cm3.getDate()); 		Assert.isTrue(message.equals(cm3.getMessage())); 		Assert.isTrue(cm2.equals(cm3.getCommentParent())); 	}   	@Test 	public void setAndGetCommentMessageTest() { 		Comment cm = new Comment(); 		String message = "This is the message"; 		cm.setMessage(message); 		Assert.notNull(cm); 		Assert.isTrue(message.equals(cm.getMessage())); 	}  	@Test 	public void setAndGetCommentDateTest() { 		Comment cm = new Comment(); 		Long date = System.currentTimeMillis(); 		cm.setDate(date); 		Assert.notNull(cm); 		Assert.isTrue(date== cm.getDate()); 	}  	@Test 	public void setAndGetCommentRepliesTest() { 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles); 		Long date = System.currentTimeMillis(); 		String message = "This is the message"; 		Comment rep = new Comment(message, date, u); 		 		List<Comment> replies = new ArrayList<Comment>(); 		replies.add(rep); 		 		Comment cm = new Comment(); 		cm.setReplies(replies); 		Assert.notNull(cm); 		Assert.notNull(cm.getReplies()); 		Assert.isTrue(replies.equals(cm.getReplies())); 	}  	@Test 	public void setAndGetCommentUserTest() { 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles); 		 		Comment cm = new Comment(); 		cm.setUser(u); 		Assert.notNull(cm); 	}  	@Test 	public void setAndGetCommentParentTest() { 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles); 		Long date = System.currentTimeMillis(); 		String message = "This is the message"; 		Comment parent = new Comment(message, date, u); 		 		Comment cm = new Comment(); 		cm.setCommentParent(parent); 		Assert.notNull(cm); 	}  } 
#2.186#package com.fullteaching.backend.integration.comment;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;  import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.annotation.Rollback; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.comment.Comment; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.entry.Entry; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.utils.ForumTestUtils; import com.google.gson.Gson;  public class CommentControllerTest extends AbstractLoggedControllerUnitTest {  	private static String newComment_uri ="/api-comments/entry/{entryId}/forum/"; 	 	private static String courseTitle = "Course Title"; 	private static String info ="Course information"; 	private static boolean forum = true; 	 	 	@Before 	public void setUp() { 		super.setUp(); 		 	}  	@Rollback 	@Test 	public void newCommentTest() { 		 	 		Course c = CourseTestUtils.newCourseWithCd(courseTitle, loggedUser, null, info, forum);	 			 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 				 		Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser); 		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser); 		entry.getComments().add(cm);	 		 		c = ForumTestUtils.newEntry(mvc, c, entry, httpSession); 		 		long entryId = c.getCourseDetails().getForum().getEntries().get(0).getId(); 		long forumId = c.getCourseDetails().getForum().getId(); 		 		Comment comment = new Comment(); 		comment.setMessage("New Comment"); 		 		Gson gson = new Gson(); 		String request_OK = gson.toJson(comment); 		 		//test new message 		//test ok  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_OK) 					                ).andReturn(); 			 			String content = result.getResponse().getContentAsString(); 			 			JSONObject json = (JSONObject) new JSONParser().parse(content); 			json = (JSONObject) json.get("entry"); 			 			Entry e = ForumTestUtils.json2Entry(json.toJSONString()); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			Assert.assertEquals("failure - expected user x" , loggedUser,e.getComments().get(0).getUser());  		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request_OK) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+"not_a_id") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);  		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 	} 	 	@Rollback 	@Test 	public void replyCommentTest() throws Exception { 		 		Course c = CourseTestUtils.newCourseWithCd(courseTitle, loggedUser, null, info, forum);	 		 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 						 		Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser); 		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser); 		entry.getComments().add(cm);		 		c = ForumTestUtils.newEntry(mvc, c, entry, httpSession); 		 		long entryId = c.getCourseDetails().getForum().getEntries().get(0).getId(); 		long forumId = c.getCourseDetails().getForum().getId(); 		 		Comment parent = c.getCourseDetails().getForum().getEntries().get(0).getComments().get(0); 		Comment comment = new Comment(); 		comment.setMessage("New Comment"); 		comment.setCommentParent(parent); 		 		Gson gson = new Gson(); 		String request_OK = gson.toJson(comment); 		 		//test new message 		//test ok  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_OK) 					                ).andReturn(); 			 			String content = result.getResponse().getContentAsString(); 			 			JSONObject json = (JSONObject) new JSONParser().parse(content); 			json = (JSONObject) json.get("entry"); 			 			Entry e = ForumTestUtils.json2Entry(json.toJSONString());  			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			Assert.assertEquals("failure - expected user x" , loggedUser, e.getComments().get(0).getReplies().get(0).getUser()); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request_OK) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", "not_anID")+"not_a_id") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 	} } 
#2.136#package com.fullteaching.backend.integration.file;  import static org.junit.Assert.*; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;  import org.junit.Assert; import org.junit.Before; import org.junit.Ignore; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.mock.web.MockMultipartFile; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.web.multipart.MultipartHttpServletRequest;  import com.fullteaching.backend.AbstractControllerUnitTest; import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.file.MimeTypes; import com.fullteaching.backend.filegroup.FileGroup; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.utils.FileTestUtils;  public class FileControllerTest extends AbstractLoggedControllerUnitTest {  	private static String upload_uri="/api-load-files/upload/course/{courseId}/file-group/";//{fileGroupId} 	private static String download_uri="/api-load-files/course/{courseId}/download/";//{fileId} 	private static String uploadPicture_uri="/api-load-files/upload/picture/";//{userId} 	 	private static MockMultipartFile firstFile = new MockMultipartFile("data", "filename.txt", "text/plain", "some xml".getBytes()); 	private static MockMultipartFile secondFile = new MockMultipartFile("data", "other-file-name.txt", "text/plain", "some other type".getBytes()); 	private static MockMultipartFile jsonFile = new MockMultipartFile("json", "", "application/json", "{\"json\": \"someValue\"}".getBytes()); 	 	@Before 	public void setUp() { 		super.setUp(); 	}   	@Test 	public void fileUploadTest() { 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		FileGroup fg = new FileGroup("Test File Group"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		 		 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+fg.getId()) 	                .file(firstFile) 	                .session((MockHttpSession) httpSession) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			fg = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - file order"+ 0, 0, fg.getFiles().get(0).getIndexOrder()); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test secondFile 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+fg.getId()) 	                .file(secondFile) 	                .session((MockHttpSession) httpSession) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			fg = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - file order"+ 1, 1, fg.getFiles().get(1).getIndexOrder()); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//BAD_REQUEST 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+"not_a_long") 	                .file(firstFile) 	                .session((MockHttpSession) httpSession) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//UNAUTHORIZED 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+"not_a_long") 	                .file(firstFile) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 	} 	 	@Test 	public void fileDownloadTest() { 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		FileGroup fg = new FileGroup("Test File Group"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		 		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c); 		 		long fileId = fg.getFiles().get(0).getId(); 		String expected_contentType = MimeTypes.getMimeType(fg.getFiles().get(0).getFileExtension()); 		 		//test OK 		try {  			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+fileId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			String contentType = result.getResponse().getContentType(); 			 			String content = result.getResponse().getContentAsString(); 			System.out.println(content);  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			Assert.assertEquals("failure - expected ContenType"+ expected_contentType, expected_contentType, contentType); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test Unkown file 				try {  					MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+23123)//Unexisting file 							                .contentType(MediaType.APPLICATION_JSON_VALUE) 							                .session((MockHttpSession) httpSession) 							                ).andReturn(); 			 					int status = result.getResponse().getStatus(); 					 					int expected = HttpStatus.OK.value(); 					 					String content = result.getResponse().getContentAsString(); 					System.out.println(content);  					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 				 				} catch (Exception e) { 					e.printStackTrace(); 					fail("EXCEPTION: //test OK"); 				} 		//test UNAUTHORIZED 		try {  			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+fileId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			String content = result.getResponse().getContentAsString(); 			System.out.println(content);  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("UNAUTHORIZED: //test OK"); 		} 		 		//test BAD_REQUEST UNPROCESSABLE_ENTITY 		try {  			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+"not_a_long") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNPROCESSABLE_ENTITY.value(); 			 			String content = result.getResponse().getContentAsString(); 			System.out.println(content);  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("UNAUTHORIZED: //test UNPROCESSABLE_ENTITY"); 		} 	}  	 	@Test 	public void pictureUploadTest() { 	  		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+loggedUser.getId()) 	                .file(firstFile) 	                .session((MockHttpSession) httpSession) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//BAD_REQUEST 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+"not_a_long") 	                .file(firstFile) 	                .session((MockHttpSession) httpSession) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//UNAUTHORIZED 		try { 			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+loggedUser.getId()) 	                .file(firstFile) 	                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 	}  } 
#1.647#/**  *   */ package com.fullteaching.backend.integration.user;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import javax.servlet.http.HttpSession;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult; import org.springframework.transaction.annotation.Transactional;  import com.fullteaching.backend.AbstractControllerUnitTest; import com.fullteaching.backend.utils.LoginTestUtils;  /**  * @author gtunon  *  */ /*@Transactional After each test the BBDD is rolled back*/ @Transactional public class UserControllerTest extends AbstractControllerUnitTest { 		 	//urls 	static String new_user_uri = "/api-users/new"; 	static String change_password_uri = "/api-users/changePassword"; 	static String login_uri = "/api-logIn"; 	 	//userStrings 	static String ok_parameters = "[\"unique@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]"; 	static String ko_parameters1 = "[\"unique@gmail.com\", \"Mock66666\", \"repeatedUser\", \"IGNORE\"]"; 	static String ko_parameters2 = "[\"unique_unique@gmail.com\", \"Mock\", \"InvalidPassword\", \"IGNORE\"]"; 	static String ko_parameters3 = "[\"nonvalidMAIL\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]"; 	 	//passParameters 	static String pass_parameters = "[\"Mock66666\", \"Mock77777\"]"; 	static String bad1_parameters = "[\"Mock66666\", \"Mock77777\"]"; 	static String bad2_parameters = "[\"Mock77777\", \"notvalid\"]"; 	 	//roles 	String[] roles = {"STUDENT"};  	@Before 	public void setUp() { 		super.setUp(); 	} 	 	/** 	 * Test method for {@link com.fullteaching.backend.user.UserController#newUser(java.lang.String[])}. 	 */ 	@Test 	public void controllerNewUserTest() {  		/*Test OK*/ 		try { 			MvcResult result =  mvc.perform(post(new_user_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(ok_parameters) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - OK"); 		} 		 		/*Test repeated user*/ 		try { 			MvcResult result =  mvc.perform(post(new_user_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(ko_parameters1) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CONFLICT.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - repeated user");  		} 		 		/*Test bad password*/ 		try { 			MvcResult result =  mvc.perform(post(new_user_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(ko_parameters2) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 				 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - badPassword");  		}	 		 		/*Test bad email*/ 		try { 			MvcResult result =  mvc.perform(post(new_user_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(ko_parameters3) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.FORBIDDEN.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - badEmail");  		} 	}  	/** 	 * Test method for {@link com.fullteaching.backend.user.UserController#changePassword(java.lang.String[])}. 	 * @throws Exception  	 */ 	@Test 	public void userChangePasswordTest() throws Exception { 	 			/*Create new user*/ 			LoginTestUtils.registerUserIfNotExists(mvc, ok_parameters); 			 			/*Login user*/ 			HttpSession session = LoginTestUtils.logIn(mvc, "unique@gmail.com", "Mock66666"); 			 			try { 			/*Test change password OK*/ 			MvcResult result_pass = mvc.perform(put(change_password_uri) 					.contentType(MediaType.APPLICATION_JSON_VALUE) 					.content(pass_parameters) 					.session((MockHttpSession) session) 				).andReturn(); 			 			int status_pass = result_pass.getResponse().getStatus(); 			Assert.assertTrue("failure login - expected HTTP status "+ 													HttpStatus.OK.value() + 													" but was: "+status_pass,  								status_pass==HttpStatus.OK.value()); 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - OK");  		} 		try { 			/*Test change password bad initial password*/ 			MvcResult result_bad1 = mvc.perform(put(change_password_uri) 					.contentType(MediaType.APPLICATION_JSON_VALUE) 					.content(bad1_parameters) 					.session((MockHttpSession) session) 				).andReturn(); 			 			int status_bad1 = result_bad1.getResponse().getStatus(); 			Assert.assertTrue("failure login - expected HTTP status "+ 													HttpStatus.CONFLICT.value() + 													" but was: "+status_bad1,  										status_bad1==HttpStatus.CONFLICT.value()); 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - OK");  		} 		try {	 			/*Test change password bad initial password*/ 			MvcResult result_bad2 = mvc.perform(put(change_password_uri) 					.contentType(MediaType.APPLICATION_JSON_VALUE) 					.content(bad2_parameters) 					.session((MockHttpSession) session) 				).andReturn(); 			 			int status_bad2 = result_bad2.getResponse().getStatus(); 			Assert.assertTrue("failure login - expected HTTP status "+ 													HttpStatus.NOT_MODIFIED.value() + 													" but was: "+status_bad2,  										status_bad2==HttpStatus.NOT_MODIFIED.value()); 		} catch (Exception e) { 			e.printStackTrace(); 			fail("Exception: newUserTest - OK"); 		} 	 	} 	 	  } 
#0.011#package com.fullteaching.backend.unitary.course;  import org.junit.BeforeClass; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.coursedetails.CourseDetails; import com.fullteaching.backend.user.User;  public class CourseUnitaryTest extends AbstractUnitTest {  	private static String title = "CURSO de Prueba"; 	private static String image = "Mock_image"; 	private static User teacher; 	 	 	@BeforeClass 	public static void initialize() { 		String [] roles = {"ROLE_TEACHER"}; 		teacher = new User("mock_teacher","mock2222","t_mocky", null,roles); 	}  	@Test 	public void newCourseTest() { 		Course c2 = new Course(); 		Assert.notNull(c2); 		 		Course c = new Course(title, image, teacher); 		Assert.notNull(c); 		Assert.isTrue(c.getTeacher().equals(teacher)); 		Assert.isTrue(c.getImage().equals(image)); 		Assert.isTrue(c.getTitle().equals(title)); 		Assert.notNull(c.getSessions()); 		Assert.notNull(c.getAttenders()); 		Assert.isNull(c.getCourseDetails()); 		 		CourseDetails cd = new CourseDetails(); 		 		Course c3 = new Course(title, image, teacher, cd); 		Assert.notNull(c3); 		Assert.isTrue(c3.getTeacher().equals(teacher)); 		Assert.isTrue(c3.getImage().equals(image)); 		Assert.isTrue(c3.getTitle().equals(title)); 		Assert.notNull(c3.getSessions()); 		Assert.notNull(c3.getAttenders()); 		Assert.notNull(c3.getCourseDetails()); 		 		Assert.isTrue(c3.getCourseDetails().equals(cd)); 	}   	@Test 	public void setAndGetCourseTitleTest() { 		Course c = new Course(); 		c.setTitle(title); 		Assert.isTrue(c.getTitle().equals(title)); 	}  	@Test 	public void setAndGetCourseImageTest() { 		Course c = new Course(); 		c.setImage(image); 		Assert.isTrue(c.getImage().equals(image)); 	}  	@Test 	public void setAndGetCourseTeacherTest() { 		Course c = new Course(); 		c.setTeacher(teacher); 		Assert.isTrue(c.getTeacher().equals(teacher)); 	}  	@Test 	public void setAndGetCourseDetailsTest() { 		Course c = new Course(); 		c.setCourseDetails(new CourseDetails()); 		Assert.notNull(c.getCourseDetails()); 	}  	@Test 	public void equalCourseTest() { 		CourseDetails cd = new CourseDetails(); 		 		Course c1 = new Course(title, image, teacher, cd); 		c1.setId((long) Math.floor((Math.random()*Long.MAX_VALUE ))); 		Course c2 = new Course(title, image, teacher); 		c1.setId((long) Math.floor((Math.random()*Long.MAX_VALUE))); 		 		Assert.isTrue(c1.equals(c1)); 		Assert.isTrue(!c1.equals("not_a_course")); 		Assert.isTrue(!c1.equals(c2)); 		Assert.isTrue(!c1.equals(null)); 		 	}  } 
#0.156#package com.fullteaching.backend.unitary.coursedetails;  import java.util.ArrayList; import java.util.List;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.coursedetails.CourseDetails; import com.fullteaching.backend.filegroup.FileGroup; import com.fullteaching.backend.forum.Forum; import com.fullteaching.backend.user.User;  public class CourseDetailsUnitaryTests extends AbstractUnitTest {  	@Before 	public void setUp() throws Exception { 	}  	@Test 	public void newCourseDetailsTest() { 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles);  		CourseDetails cd = new CourseDetails(); 		Assert.notNull(cd); 		 		Course c = new Course("to modify", "/../assets/images/default_session_image.png", u);  		CourseDetails cd2 = new CourseDetails(c); 		 		Assert.notNull(cd2); 		Assert.isTrue(cd2.getCourse().equals(c)); 		 	}  	@Test 	public void setAndGetCourseDetailsInfoTest() { 		CourseDetails cd = new CourseDetails(); 		cd.setInfo("this is info"); 		Assert.notNull(cd); 		Assert.isTrue("this is info".equals(cd.getInfo())); 	}  	@Test 	public void setAndGetCourseDetailsForumTest() { 		CourseDetails cd = new CourseDetails(); 		Forum forum = new Forum(); 		cd.setForum(forum); 		Assert.notNull(cd); 		Assert.isTrue(forum.equals(cd.getForum())); 	}  	@Test 	public void setAndGetCourseDetailsFilesTest() { 		CourseDetails cd = new CourseDetails(); 		List<FileGroup> files= new ArrayList<FileGroup>(); 		cd.setFiles(files); 		Assert.notNull(cd); 		Assert.isTrue(files.equals(cd.getFiles())); 	}  	@Test 	public void SetAndGetCourseDetailsCourseTest() { 		CourseDetails cd = new CourseDetails(); 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles);  		Course c = new Course("to modify", "/../assets/images/default_session_image.png", u);  		cd.setCourse(c); 		Assert.notNull(cd); 		Assert.isTrue(cd.getCourse().equals(c));  	}  } 
#2.763#package com.fullteaching.backend.integration.filegroup;  import static org.junit.Assert.*; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import java.util.List;  import org.junit.Assert; import org.junit.Before; import org.junit.Ignore; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.coursedetails.CourseDetails; import com.fullteaching.backend.file.File; import com.fullteaching.backend.filegroup.FileGroup; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.utils.FileTestUtils;  public class FileGroupControllerTest extends AbstractLoggedControllerUnitTest {  	private static String newFile_uri="/api-files/";//{courseDetails_id} 	private static String modifyGroupFile_uri="/api-files/edit/file-group/course/";//{courseId} 	private static String editOrder_uri="/api-files/edit/file-order/course/{courseId}/file/{fileId}/from/{sourceID}/to/{targetId}/pos/";//newPosition 	private static String modifyFile_uri="/api-files/edit/file/file-group/{fileGroupId}/course/";//{courseId} 	private static String deleteGroup_uri="/api-files/delete/file-group/{fileGroupId}/course/";//{courseId} 	private static String deleteFile_uri="/api-files/delete/file/{fileId}/file-group/{fileGroupId}/course/";//{courseId}  	@Before 	public void setUp() { 		super.setUp(); 	}  	@Test 	public void testNewFileGroup() { 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		CourseDetails cd = null;  		 		FileGroup fg = new FileGroup("New FileGroup"); 		String request_OK = FileTestUtils.fileGroup2Json(fg); 		 		long courseId = c.getCourseDetails().getId(); 		 		 		try {  			MvcResult result =  mvc.perform(post(newFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value();  			String content = result.getResponse().getContentAsString(); 			cd = CourseTestUtils.json2CourseDetails(content); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//Unauthorized 		try {  			MvcResult result =  mvc.perform(post(newFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		  		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(post(newFile_uri+"notANumber") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		 		//Test for filegroups with parent 		fg = FileTestUtils.getFileGroupFromCd(cd, fg.getTitle()); 		FileGroup fg2 = new FileGroup("New FileGroup with parent", fg); 		String request_withParent = FileTestUtils.fileGroup2Json(fg2); 		 		try {  			MvcResult result =  mvc.perform(post(newFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_withParent) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 		 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK with Parent"); 		} 		 		//fake parent 		fg.setId(5654); 		FileGroup fg3 = new FileGroup("New FileGroup with parent", fg); 		String request_withParent_BadRequest = FileTestUtils.fileGroup2Json(fg3); 		 		try {  			MvcResult result =  mvc.perform(post(newFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_withParent_BadRequest) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 		 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK with Parent"); 		} 		 	}  	@Test 	public void testModifyFileGroup() { 		//Prepare Test 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		CourseDetails cd = null;  		 		FileGroup fg = new FileGroup("New FileGroup"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		long courseId = c.getId(); 		 		fg.setTitle("Modified FileGroup"); 		 		String request_OK = FileTestUtils.fileGroup2Json(fg); 		try {  			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			Assert.assertEquals("not modified", "Modified FileGroup", fg1.getTitle()); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//Unauthorized 		try {  			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		  		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+"not_A_Number") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//NOT_MODIFIED 		fg.setId(4564564); //fake id 		String request_KO = FileTestUtils.fileGroup2Json(fg); 		try {  			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_KO) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.NOT_FOUND.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test NOT_MODIFIED"); 		} 		 		 		 	} 	 	@Test 	public void testEditFileOrder() { 		///api-files/edit/file-order/course/{courseId}/file/{fileId}/from/{sourceID}/to/{targetId}/pos/";//newPosition 		 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 				 		FileGroup fg = new FileGroup("New FileGroup"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c); 		long firstFileId = fg.getFiles().get(0).getId(); 		fg = FileTestUtils.uploadOtherTestFile(mvc, httpSession, fg, c); 		long secondFileId = fg.getFiles().get(1).getId();  		FileGroup fg2 = new FileGroup("Other FileGroup"); 		fg2 = FileTestUtils.newFileGroup(mvc, httpSession, fg2, c); 		fg2 = FileTestUtils.uploadOtherTestFile(mvc, httpSession, fg2, c); 		 		try {  			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", ""+c.getId()) 															 .replace("{fileId}", ""+firstFileId) 															 .replace("{sourceID}", ""+fg.getId()) 															 .replace("{targetId}", ""+fg2.getId())+ "0") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			List<FileGroup> fglst = FileTestUtils.json2fileGroupList(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			/*check the filegroups*/ 			Assert.assertEquals("failure - not moved", 1, fglst.get(0).getFiles().size()); 			Assert.assertEquals("failure - not moved", 2, fglst.get(1).getFiles().size()); 			 			Assert.assertEquals("failure - order fail" , 0, fglst.get(0).getFiles().get(0).getIndexOrder()); 			Assert.assertEquals("failure - order fail" , 0, fglst.get(1).getFiles().get(0).getIndexOrder()); 			Assert.assertEquals("failure - order fail" , 1, fglst.get(1).getFiles().get(1).getIndexOrder());  			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", "not_a_long") 															 .replace("{fileId}", ""+firstFileId) 															 .replace("{sourceID}", ""+fg.getId()) 															 .replace("{targetId}", ""+fg2.getId())+ "0") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			//FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//UNAUTHORIZED 		try {  			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", ""+c.getId()) 															 .replace("{fileId}", ""+firstFileId) 															 .replace("{sourceID}", ""+fg.getId()) 															 .replace("{targetId}", ""+fg2.getId())+ "0") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			 			 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 	} 	  	@Test 	public void testModifyFile() { 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 				 		FileGroup fg = new FileGroup("New FileGroup"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		 		File f_not_existing = new File(1,"no Exists"); 		String not_modified = FileTestUtils.file2Json(f_not_existing); 		 		//NOT_MODIFIED 1 		try {  			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(not_modified) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.NOT_MODIFIED.value(); 	 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test NOT_MODIFIED 1"); 		} 		 		//NOT_MODIFIED 2 		try {  			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", "564")+c.getId())//notExisting fileGroup 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(not_modified) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.NOT_MODIFIED.value(); 	 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test NOT_MODIFIED 2"); 		} 				 		//OK preparation 		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c); 		 		File f = fg.getFiles().get(0); 		f.setName("Modified File"); 		 		String request_OK = FileTestUtils.file2Json(f); 		try {  			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			FileGroup fg_r = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			/*check the filename*/ 			Assert.assertEquals("failure - not modified", "Modified File", fg_r.getFiles().get(0).getName()); 		 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+"not_a_long") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			//FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString()); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//UNAUTHORIZED 		try {  			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(request_OK) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			 			 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 	} 	 	 	@Test 	public void testDeleteFileGroup() { 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 				 		FileGroup fg = new FileGroup("New FileGroup"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		 		//OK 		try {  			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//Bad Request 		try {  			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+"not_a_long") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		try {  			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 	} 	 	@Test 	public void testDeleteFile() { 		//private static String deleteFile_uri="/api-files/delete/file/{fileId}/file-group/{fileGroupId}/course/";//{courseId} 		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 				 		FileGroup fg = new FileGroup("New FileGroup"); 		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c); 		 		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c); 		long firstFileId = fg.getFiles().get(0).getId(); 		 		 		//OK 		try {  			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId()) 																 .replace("{fileId}", ""+firstFileId)+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//Bad Request (already deleted) 		/*try {  			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId()) 				 					 .replace("{fileId}", ""+firstFileId)+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST already deleted"); 		}*/ 		 		//BAD_REQUEST 		try {  			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId()) 					 											 .replace("{fileId}", ""+firstFileId)+"not_a_long") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		try {  			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId()) 					 											 .replace("{fileId}", ""+firstFileId)+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 					 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 	}  } 
#0.155#package com.fullteaching.backend.unitary.entry;   import java.util.ArrayList; import java.util.List;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.comment.Comment; import com.fullteaching.backend.entry.Entry; import com.fullteaching.backend.user.User;  public class EntryUnitaryTest extends AbstractUnitTest {  	@Before 	public void setUp() throws Exception { 	}   	@Test 	public void newForumEntryTest() { 		String[] roles = {"TEACHER"}; 		User u =  new User("mock", "Pass1234", "mock", null, roles); 		long date = System.currentTimeMillis(); 		 		Entry e2 = new Entry(); 		Assert.notNull(e2); 		 		Entry e = new Entry("Test Entry",date,u); 		Assert.notNull(e); 		Assert.isTrue("Test Entry".equals(e.getTitle())); 		Assert.isTrue(date==e.getDate()); 		Assert.isTrue(u.equals(e.getUser())); 	}  	@Test 	public void setAndGetEntryTitleTest() { 		Entry e = new Entry(); 		e.setTitle("This title"); 		Assert.notNull(e); 		Assert.isTrue("This title".equals(e.getTitle())); 	}  	@Test 	public void setAndGetEntryDateTest() { 		Entry e = new Entry(); 		long date = System.currentTimeMillis(); 		e.setDate(date); 		Assert.notNull(e); 		Assert.isTrue(date==e.getDate());  	}  	@Test 	public void setAndGetEntryUserTest() { 		String[] roles = {"TEACHER"};  		User u =  new User("mock", "Pass1234", "mock", null, roles);  		Entry e = new Entry(); 		Assert.notNull(e); 		e.setUser(u); 		Assert.isTrue(u.equals(e.getUser()));  	}  	@Test 	public void setAndGetEntryCommentsTest() {  		List<Comment> comments = new ArrayList<Comment>(); 		 		Entry e = new Entry(); 		e.setComments(comments); 		Assert.notNull(e); 		Assert.isTrue(comments.equals(e.getComments()));  	}  } 
#0.721#package com.fullteaching.backend.integration.security;  import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import java.io.UnsupportedEncodingException;  import javax.servlet.http.HttpSession;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult; import org.springframework.test.web.servlet.setup.MockMvcBuilders;  import com.fullteaching.backend.AbstractControllerUnitTest; import com.fullteaching.backend.utils.LoginTestUtils;  public class LoginControllerUnitaryTest extends AbstractControllerUnitTest {  	 	String user_parameters = "[\"fakeemail@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";  	String logout_uri = "/api-logOut"; 	String login_uri = "/api-logIn"; 	 	@Before 	public void setUp() { 		mvc = MockMvcBuilders.webAppContextSetup(webAppCtx) 				.apply(springSecurity()) 				.build(); 	}  	@Test 	public void logInSecurityTest() throws UnsupportedEncodingException, Exception {  		LoginTestUtils.registerUserIfNotExists(mvc, user_parameters); 		 		String userPass = "fakeemail@gmail.com:Mock66666";  		MvcResult result_login = mvc.perform(get(login_uri) 						.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(userPass)) 						.header("X-Requested-With", "XMLHttpRequest") 					.contentType(MediaType.APPLICATION_JSON_VALUE) 				).andReturn(); 		 		System.out.println(result_login.getResponse().toString()); 		int status_login = result_login.getResponse().getStatus(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 											HttpStatus.OK.value() + 											" but was: "+status_login,  					status_login==HttpStatus.OK.value()); 		 		//login KO  		MvcResult result_login_ko = mvc.perform(get(login_uri) 						.header("X-Requested-With", "XMLHttpRequest") 					.contentType(MediaType.APPLICATION_JSON_VALUE) 				).andReturn(); 		 		System.out.println(result_login_ko.getResponse().toString()); 		int status_login_ko = result_login_ko.getResponse().getStatus(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 											HttpStatus.UNAUTHORIZED.value() + 											" but was: "+status_login_ko,  											status_login_ko==HttpStatus.UNAUTHORIZED.value());  		//login KO bad password 		String userBadPass = "fakeemail@gmail.com:BadPass";  		MvcResult result_login_bad_password = mvc.perform(get(login_uri) 						.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(userBadPass)) 						.header("X-Requested-With", "XMLHttpRequest") 					.contentType(MediaType.APPLICATION_JSON_VALUE) 				).andReturn(); 		 		System.out.println(result_login_ko.getResponse().toString()); 		int status_login_bad_password = result_login_bad_password.getResponse().getStatus(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 											HttpStatus.UNAUTHORIZED.value() + 											" but was: "+status_login_bad_password,  											status_login_bad_password==HttpStatus.UNAUTHORIZED.value()); 		 		//login KO nouser 				String noUser = "nouser:BadPass";  				MvcResult result_login_noUser = mvc.perform(get(login_uri) 								.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(noUser)) 								.header("X-Requested-With", "XMLHttpRequest") 							.contentType(MediaType.APPLICATION_JSON_VALUE) 						).andReturn(); 				 				System.out.println(result_login_ko.getResponse().toString()); 				int status_login_noUser = result_login_noUser.getResponse().getStatus(); 				 				Assert.assertTrue("failure login - expected HTTP status "+ 													HttpStatus.UNAUTHORIZED.value() + 													" but was: "+status_login_noUser,  													status_login_noUser==HttpStatus.UNAUTHORIZED.value()); 		 		 	}  	@Test 	public void logOutSecurityTest() throws Exception { 		/*Create new user*/ 		LoginTestUtils.registerUserIfNotExists(mvc, user_parameters); 		 		/*Login user*/ 		HttpSession session = LoginTestUtils.logIn(mvc, "fakeemail@gmail.com", "Mock66666"); 		 		/*Test LogOut OK*/ 		MvcResult result_pass = mvc.perform(put(logout_uri) 				.contentType(MediaType.APPLICATION_JSON_VALUE) 				.session((MockHttpSession) session) 			).andReturn(); 		 		int status_pass = result_pass.getResponse().getStatus(); 		Assert.assertTrue("failure login - expected HTTP status "+ 												HttpStatus.OK.value() + 												" but was: "+status_pass,  							status_pass==HttpStatus.OK.value()); 		 		/*Test LogOut Unauthorized*/ 		MvcResult result_unauthorized = mvc.perform(put(logout_uri) 				.contentType(MediaType.APPLICATION_JSON_VALUE) 				.session((MockHttpSession) session) 			).andReturn(); 		 		int status_unauthorized = result_unauthorized.getResponse().getStatus(); 		Assert.assertTrue("failure login - expected HTTP status "+ 												HttpStatus.UNAUTHORIZED.value() + 												" but was: "+status_unauthorized,  								status_unauthorized==HttpStatus.UNAUTHORIZED.value()); 		 		 	 	}  } 
#0.07#package com.fullteaching.backend.e2e.rest;  import static org.junit.Assert.fail;  import java.io.IOException; import java.security.KeyManagementException; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus;  import com.fullteaching.backend.utils.HttpApiClient;  public class UserRestTest {      protected static String APP_URL;     protected static String ET_SUT_HOST;     protected static int ET_SUT_PORT = 5001;     private HttpApiClient httpApiClient;      // urls     static String new_user_uri = "/api-users/new";     static String change_password_uri = "/api-users/changePassword";     static String login_uri = "/api-logIn";     // userStrings     static String ok_parameters = "[\"unique@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";     static String ok_parameters_2 = "[\"unique2@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";     // passParameters     static String pass_parameters = "[\"Mock66666\", \"Mock77777\"]";      @Before     public void setUp() {         if (System.getenv("ET_SUT_HOST") != null) {             ET_SUT_HOST = System.getenv("ET_SUT_HOST");         } else {             ET_SUT_HOST = System.getProperty("sut.host");             if (ET_SUT_HOST == null) {                 ET_SUT_HOST = "localhost";             }         }          if (System.getenv("ET_SUT_PORT") != null) {             if (!System.getenv("ET_SUT_PORT").isEmpty()) {                 ET_SUT_PORT = Integer.parseInt(System.getenv("ET_SUT_PORT"));             } else {                 ET_SUT_PORT = 0;             }         }     }      @Test     public void testCreateUserOk() {         try {             // Create the user if it doesn't exist             int status = createUser(ok_parameters);              int expected = HttpStatus.CREATED.value();              Assert.assertEquals("failure - expected HTTP status " + expected,                     expected, status);         } catch (IOException | KeyManagementException | NoSuchAlgorithmException                 | KeyStoreException e) {             e.printStackTrace();             fail("EXCEPTION: " + e.getMessage());         }     }      @Test     public void testChangeUserPassword() {         try {             // Create the user if it doesn't exist             createUser(ok_parameters_2);              // Change the user's password             httpApiClient = new HttpApiClient(null, ET_SUT_HOST, ET_SUT_PORT,                     change_password_uri, "unique2@gmail.com", "Mock66666");              int status_pass = httpApiClient.sendRequest(pass_parameters, "put");             Assert.assertTrue("failure login - expected HTTP status "                     + HttpStatus.OK.value() + " but was: " + status_pass,                     status_pass == HttpStatus.OK.value());          } catch (IOException | KeyManagementException | NoSuchAlgorithmException                 | KeyStoreException e) {             e.printStackTrace();             fail("EXCEPTION: " + e.getMessage());         }     }      private int createUser(String parameters) throws KeyManagementException,             NoSuchAlgorithmException, KeyStoreException, IOException {         httpApiClient = new HttpApiClient(null, ET_SUT_HOST, ET_SUT_PORT,                 new_user_uri, null, null);          return httpApiClient.sendRequest(parameters, "post");     }  } 
#0.005#package com.fullteaching.backend.unitary.forum;  import java.util.ArrayList; import java.util.List;  import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.entry.Entry; import com.fullteaching.backend.forum.Forum;  public class ForumUnitaryTest extends AbstractUnitTest {  	 	@Test 	public void newForumTest() { 		Forum f = new Forum(); 		Assert.notNull(f); 		 		Forum f2 = new Forum(true); 		Assert.notNull(f2); 		Assert.isTrue(f2.isActivated()); 		 		Forum f3 = new Forum(false); 		Assert.notNull(f3); 		Assert.isTrue(!f3.isActivated()); 	}  	 	@Test 	public void activateAndDeactivateTest() { 		Forum f = new Forum(); 		f.setActivated(true); 		Assert.isTrue(f.isActivated()); 		 		f.setActivated(false); 		Assert.isTrue(!f.isActivated()); 		 	}  	@Test 	public void testGetEntries() { 		Forum f = new Forum(); 		List<Entry> entries = new ArrayList<Entry>(); 		 		f.setEntries(entries); 		 		Assert.notNull(f); 		Assert.isTrue(f.getEntries().equals(entries)); 	}  } 
#0.514#package com.fullteaching.backend.integration.security;   import java.util.ArrayList; import java.util.Collection;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.security.AuthorizationService; import com.fullteaching.backend.user.User; import com.fullteaching.backend.user.UserComponent;  public class AutorizationServiceUnitaryTest extends AbstractUnitTest {  	@Autowired 	private UserComponent user;  	@Autowired 	private AuthorizationService service; 	 	@Before 	public void setUp() throws Exception { 		if(user.getLoggedUser()==null) { 			String[] roles = {"STUDENT"}; 			User u = new User("TestUser", "Mock6666", "mock", null,roles); 			user.setLoggedUser(u); 		}	 	}  	@Test 	public void checkBackendLoggedTest() { 		ResponseEntity<Object> r = service.checkBackendLogged(); 		 		 		Assert.assertEquals("Expeceted null", null, r); 		 		 		user.setLoggedUser(null); 		ResponseEntity<Object> r2 = service.checkBackendLogged(); 		 		int status2 = r2.getStatusCodeValue(); 		int expected2 = HttpStatus.UNAUTHORIZED.value(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 				expected2 + 				" but was: "+status2,  				status2==expected2); 		 		user.setLoggedUser(null); 	}  	@Test 	public void checkAuthorizationTest() { 		String o ="Example object"; 		 		String[] roles = {"STUDENT"}; 		User u = new User("FailUser", "Mock6666", "mock", null,roles); 		 		ResponseEntity <Object> r = service.checkAuthorization(null, u); 		int status1 = r.getStatusCodeValue(); 		int expected1 = HttpStatus.NOT_FOUND.value(); 		 		Assert.assertEquals("failure - expected HTTP status "+expected1, expected1, status1); 		 		 		ResponseEntity <Object> r2 = service.checkAuthorization(o, u); 		int status2 = r2.getStatusCodeValue(); 		int expected2 = HttpStatus.UNAUTHORIZED.value(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 				expected2 + 				" but was: "+status2,  				status2==expected2); 		 		ResponseEntity <Object> r3 = service.checkAuthorization(o, user.getLoggedUser()); 		 		Assert.assertEquals("Expeceted null", null, r3);  		 	}  	@Test 	public void checkAuthorizationUsersTest() { 		String o ="Example object"; 		 		String[] roles = {"STUDENT"}; 		Collection<User> u = new ArrayList<User>(); 		 		u.add(new User("user3", "Mock6666", "mock", null,roles)); 		u.add(new User("user1", "Mock6666", "mock", null,roles)); 		u.add(new User("user2", "Mock6666", "mock", null,roles)); 				 		ResponseEntity <Object> r = service.checkAuthorizationUsers(null, u); 		int status1 = r.getStatusCodeValue(); 		int expected1 = HttpStatus.NOT_FOUND.value(); 		 		Assert.assertEquals("failure - expected HTTP status "+expected1, expected1, status1); 		 		 		ResponseEntity <Object> r2 = service.checkAuthorizationUsers(o, u); 		int status2 = r2.getStatusCodeValue(); 		int expected2 = HttpStatus.UNAUTHORIZED.value(); 		 		Assert.assertTrue("failure login - expected HTTP status "+ 				expected2 + 				" but was: "+status2,  				status2==expected2); 		 		u.add(user.getLoggedUser()); 		ResponseEntity <Object> r3 = service.checkAuthorizationUsers(o, u); 		 		Assert.assertEquals("Expeceted null", null, r3); 		 	}  } 
#0.213#package com.fullteaching.backend.integration.forum;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.utils.CourseTestUtils;  public class ForumControllerTest extends AbstractLoggedControllerUnitTest { 	 	private static String toggleForum_uri = "/api-forum/edit/"; 	 	@Before 	public void setUp() { 		super.setUp(); 	}  	@Test 	public void toggleForumTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Course Title", loggedUser, null, "this is the info", false); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		//test ok  		try { 			MvcResult result =  mvc.perform(put(toggleForum_uri+c.getCourseDetails().getId())//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content("true") 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(put(toggleForum_uri+c.getCourseDetails().getId())//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content("true") 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(put(toggleForum_uri+"not_a_id")//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 	}  } 
#0.325#package com.fullteaching.backend.integration.entry;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.comment.Comment; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.entry.Entry; import com.fullteaching.backend.utils.CourseTestUtils; import com.google.gson.Gson;  public class EntryControllerTest extends AbstractLoggedControllerUnitTest { 	 	 	private static String newEntry_uri ="/api-entries/forum/"; 	 	@Before 	public void setUp() { 		super.setUp(); 	}  	@Test 	public void newForumEntryControllerTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Test Forum", loggedUser, null, "this is the info", true); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		long forumId = c.getCourseDetails().getForum().getId(); 		long cdId = c.getCourseDetails().getId(); 		 		 		Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser); 		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser); 		entry.getComments().add(cm); 		 		Assert.assertTrue((forumId>-1)&&(cdId>-1)); 		 		Gson gson = new Gson(); 		String entry_request = gson.toJson(entry); 		 		//test ok  		try { 			 			MvcResult result =  mvc.perform(post(newEntry_uri+forumId)//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(entry_request+String.valueOf(cdId)) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test UNAUTHORIZED  		try { 			 			MvcResult result =  mvc.perform(post(newEntry_uri+forumId)//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(entry_request+String.valueOf(cdId)) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test UNAUTHORIZED"); 		} 		 		//test BAD_REQUEST  		try { 			 			MvcResult result =  mvc.perform(post(newEntry_uri+"not_a_id")//fakeID 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 	}  } 
#3.173#package com.fullteaching.backend.integration.course;  import static org.junit.Assert.fail; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  import java.util.HashSet; import java.util.Set;  import org.junit.Assert; import org.junit.Before; import org.junit.Test; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.mock.web.MockHttpSession; import org.springframework.test.web.servlet.MvcResult;  import com.fullteaching.backend.AbstractLoggedControllerUnitTest; import com.fullteaching.backend.course.Course; import com.fullteaching.backend.utils.CourseTestUtils; import com.fullteaching.backend.utils.LoginTestUtils; import com.fullteaching.backend.user.User;  public class CourseControllerTest extends AbstractLoggedControllerUnitTest {  	 	private static String getCourses_uri = "/api-courses/user/"; 	private static String getCourse_uri = "/api-courses/course/"; 	private static String newCourse_uri = "/api-courses/new"; 	private static String editCourse_uri = "/api-courses/edit"; 	private static String deleteCourse_uri = "/api-courses/delete/"; 	private static String addAttenders_uri = "/api-courses/edit/add-attenders/course/"; 	private static String deleteAttenders_uri = "/api-courses/edit/delete-attenders"; 	 	private static String[][] attendantsStrings = {	{"fakeemail2@gmail.com","Mock66666","fakeUser","IGNORE"}, 													{"fakeemail1@gmail.com","Mock66666","fakeUser","IGNORE"}}; 	private static String[][] secondAtemptAttendant = {	{"invalidEmail","Mock66666","fakeUser","IGNORE"}, 														{"fakeemail2@gmail.com","repeated","fakeUser","IGNORE"}, 														{"ok@gmail.com","OKUser1234","fakeUser","IGNORE"}}; 	@Before 	public void setUp() { 		super.setUp(); 	}  	@Test 	public void getCoursesFromUserTest() { 		//test OK 		try {  			MvcResult result =  mvc.perform(get(getCourses_uri+"741") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 	 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//test unauthorized 		try {  			MvcResult result =  mvc.perform(get(getCourses_uri+"741") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test unauthorized"); 		} 		 		//KO no long id 		try { 			 			MvcResult result =  mvc.perform(get(getCourses_uri+"no_long") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 		 			/*String content = result.getResponse().getContentAsString(); 			 * TODO: Assert course */ 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //KO no long id"); 		} 		 	}  	@Test 	public void getCourseByIdTest() { 		//test OK 				try { 					 					MvcResult result =  mvc.perform(get(getCourse_uri+"741") 							                .contentType(MediaType.APPLICATION_JSON_VALUE) 							                .session((MockHttpSession) httpSession) 							                ).andReturn(); 				 					int status = result.getResponse().getStatus(); 					 					int expected = HttpStatus.OK.value(); 					 					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 				 				} catch (Exception e) { 					e.printStackTrace(); 					fail("EXCEPTION: //test OK"); 				} 				//test unauthorized 				try { 					 					MvcResult result =  mvc.perform(get(getCourse_uri+"741") 							                .contentType(MediaType.APPLICATION_JSON_VALUE) 							                ).andReturn(); 				 					int status = result.getResponse().getStatus(); 					 					int expected = HttpStatus.UNAUTHORIZED.value(); 					 					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 				 				} catch (Exception e) { 					e.printStackTrace(); 					fail("EXCEPTION: //KO unauthorized"); 				} 				//KO no long id 				try { 					MvcResult result =  mvc.perform(get(getCourse_uri+"no_long") 							                .contentType(MediaType.APPLICATION_JSON_VALUE) 							                .session((MockHttpSession) httpSession) 							                ).andReturn(); 				 					int status = result.getResponse().getStatus(); 					 					int expected = HttpStatus.BAD_REQUEST.value();  					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 				 				} catch (Exception e) { 					e.printStackTrace(); 					fail("EXCEPTION: //test KO no long id"); 				} 	}  	@Test 	public void newCourseTest() { 		 		Course c = CourseTestUtils.newCourseWithCd("Test Course", loggedUser, null, "empty", true); 		Course c2= CourseTestUtils.newCourse("Test Course", loggedUser, null);		 		 		String OK_request =CourseTestUtils.course2JsonStr(c); 		String OK_request_nullcd = CourseTestUtils.course2JsonStr(c2); 		 		 		//test OK 		try { 			MvcResult result =  mvc.perform(post(newCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test OK cd 		try { 			MvcResult result =  mvc.perform(post(newCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request_nullcd) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.CREATED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK cd"); 		} 		//test unauthorized 		try { 			MvcResult result =  mvc.perform(post(newCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test unauthorized"); 		} 		 		//test bad request 		try { 			MvcResult result =  mvc.perform(post(newCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 		 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test  bad request"); 		} 		 	}  	//TODO: // If the user is not the teacher of the course 	//TODO: // If courseDetaisl != null 	@Test 	public void modifyCourseTest() { 		 		Course c = CourseTestUtils.newCourse("To Modify", loggedUser, null); 		Course c2 = CourseTestUtils.newCourse("Modified", null, null); 		 		Course cwcd = CourseTestUtils.newCourseWithCd("To Modify", loggedUser, null, "info", false); 		Course cwcd2 = CourseTestUtils.newCourseWithCd("To Modify", loggedUser, null, "Modified", false);  		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);  		c2.setId(c.getId()); 		 		cwcd = CourseTestUtils.createCourseIfNotExist(mvc, cwcd, httpSession);  		cwcd2.setId(cwcd.getId()); 		 		String OK_request =CourseTestUtils.course2JsonStr(c2); 		String OK_request2 = CourseTestUtils.course2JsonStr(cwcd2);  		try { 			MvcResult result =  mvc.perform(put(editCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request.replaceAll("_ID_", String.valueOf(c.getId()))) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			/* 			 * TODO check more checks to do 			 */ 			 			int status = result.getResponse().getStatus(); 			int expected = HttpStatus.OK.value(); 			 			String content = result.getResponse().getContentAsString(); 			Course c_res = CourseTestUtils.json2Course(content);  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			Assert.assertEquals("failure - expected title: "+c2.getTitle(), c2.getTitle(), c_res.getTitle()); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		try { 			MvcResult result =  mvc.perform(put(editCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request2.replaceAll("_ID_", String.valueOf(c.getId()))) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			/* 			 * TODO check more checks to do 			 */ 			 			int status = result.getResponse().getStatus(); 			int expected = HttpStatus.OK.value(); 			 			String content = result.getResponse().getContentAsString(); 			Course c_res = CourseTestUtils.json2Course(content);  			Assert.assertEquals("failure - expected HTTP status (2) "+expected, expected, status); 			Assert.assertEquals("failure - expected title(2): "+cwcd2.getCourseDetails().getInfo(), cwcd2.getCourseDetails().getInfo(), c_res.getCourseDetails().getInfo()); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		//test unauthorized 		try { 			MvcResult result =  mvc.perform(put(editCourse_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .content(OK_request.replaceAll("_ID_", String.valueOf(c.getId()))) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test unauthorized"); 		} 			 	}  	//TODO: // If the user is not the teacher of the course 	@Test 	public void delteteCourseTest() { 		 		Course c = CourseTestUtils.newCourse("to delete", loggedUser, null); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		//test unauthorized 		try { 			MvcResult result =  mvc.perform(delete(deleteCourse_uri+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.UNAUTHORIZED.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 		 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test unauthorized"); 		} 		 		//test OK request 		try { 			MvcResult result =  mvc.perform(delete(deleteCourse_uri+"not_a_course") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		try { 				MvcResult result =  mvc.perform(delete(deleteCourse_uri+c.getId()) 						                .contentType(MediaType.APPLICATION_JSON_VALUE) 						                .session((MockHttpSession) httpSession) 						                ).andReturn(); 				 				int status = result.getResponse().getStatus(); 				 				int expected = HttpStatus.OK.value();  				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			} catch (Exception e) { 				e.printStackTrace(); 				fail("EXCEPTION: //test OK"); 			} 			 	}  	@Test 	public void addAttenders2CourseTest() throws Exception { 		 		//Prepare Test  		String attendersEmails = "["; 		for (int i = 0; i< attendantsStrings.length;i++) { 			attendersEmails += "\""+attendantsStrings[i][0]+"\","; 			LoginTestUtils.registerUserIfNotExists(mvc, "[\""+attendantsStrings[i][0]+"\"," 														+"\""+attendantsStrings[i][1]+"\"," 														+"\""+attendantsStrings[i][2]+"\"," 														+"\""+attendantsStrings[i][3]+"\"]"); 		} 		attendersEmails = attendersEmails.substring(0, attendersEmails.length()-1)+"]"; 		 		String attenders2Emails = "["; 		for (int i = 0; i< secondAtemptAttendant.length;i++) { 			attenders2Emails += "\""+secondAtemptAttendant[i][0]+"\","; 			LoginTestUtils.registerUserIfNotExists(mvc, "[\""+secondAtemptAttendant[i][0]+"\"," 														+"\""+secondAtemptAttendant[i][1]+"\"," 														+"\""+secondAtemptAttendant[i][2]+"\"," 														+"\""+secondAtemptAttendant[i][3]+"\"]"); 		} 		attenders2Emails = attenders2Emails.substring(0, attenders2Emails.length()-1)+"]"; 		 		Course c = CourseTestUtils.newCourse("to modify", loggedUser, null);  		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		 		//test unauthorized 		try { 				MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId()) 						                .contentType(MediaType.APPLICATION_JSON_VALUE) 						                .content(attendersEmails) 						                ).andReturn(); 				 				int status = result.getResponse().getStatus(); 				 				int expected = HttpStatus.UNAUTHORIZED.value();  				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			} catch (Exception e) { 				e.printStackTrace(); 				fail("EXCEPTION: //test UNAUTHORIZED"); 			} 		//test bad request 		try { 			MvcResult result =  mvc.perform(put(addAttenders_uri+"not_a_course") 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//test ok 1 		try { 			MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(attendersEmails) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 		//test ok 2 		try { 			MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId()) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(attenders2Emails) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value(); 			 			Assert.assertEquals("failure - expected HTTP status (2) "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 		 	}  	@Test 	public void deleteAttenderFromCourseTest() throws Exception { 		 		Course c = CourseTestUtils.newCourse("to modify", loggedUser, null); 		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		c = CourseTestUtils.addAttenders(mvc,httpSession,c,attendantsStrings); 		 		Set<User> cattenders = new HashSet<User>(); 		cattenders.add((User)c.getAttenders().toArray()[0]); 		 		Course ccopia = CourseTestUtils.newCourse(c.getTitle(), loggedUser, cattenders); 		ccopia.setId(c.getId()); 				 		String ok_request =  CourseTestUtils.course2JsonStr(ccopia); 		 		//test unauthorized 		try { 				MvcResult result =  mvc.perform(put(deleteAttenders_uri) 						                .contentType(MediaType.APPLICATION_JSON_VALUE) 						                .content(ok_request) 						                ).andReturn(); 				 				int status = result.getResponse().getStatus(); 				 				int expected = HttpStatus.UNAUTHORIZED.value();  				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 			} catch (Exception e) { 				e.printStackTrace(); 				fail("EXCEPTION: //test UNAUTHORIZED"); 			} 		//test bad request 		try { 			MvcResult result =  mvc.perform(put(deleteAttenders_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.BAD_REQUEST.value();  			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test BAD_REQUEST"); 		} 		 		//test ok  		try { 			MvcResult result =  mvc.perform(put(deleteAttenders_uri) 					                .contentType(MediaType.APPLICATION_JSON_VALUE) 					                .session((MockHttpSession) httpSession) 					                .content(ok_request) 					                ).andReturn(); 			 			int status = result.getResponse().getStatus(); 			 			int expected = HttpStatus.OK.value();  			Assert.assertEquals("failure - expected HTTP status  "+expected, expected, status); 			 		} catch (Exception e) { 			e.printStackTrace(); 			fail("EXCEPTION: //test OK"); 		} 	}  } 
#1.035#package com.fullteaching.backend.unitary.file;  import org.junit.Before; import org.junit.Test; import org.springframework.util.Assert;  import com.fullteaching.backend.AbstractUnitTest; import com.fullteaching.backend.file.File;  public class FileUnitaryTest extends AbstractUnitTest {  	static int filetype = 0; 	static String filename = "FileNAME.doc"; 	static String filelink = "this link"; 	static int fileorder = 1;  	 	@Before 	public void setUp() throws Exception {  	}  	@Test 	public void newFileTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		//No possiblity of test as Random is used 		//Assert.isTrue(encoder.matches(filename, f1.getNameIdent())); 		 		 		File f2 = new File (filetype, filename, filelink); 		Assert.notNull(f2); 		Assert.isTrue(filetype==f2.getType()); 		Assert.isTrue(filename.equals(f2.getName())); 		Assert.isTrue(filelink.equals(f2.getLink())); 		//No possiblity of test as Random is used 		//Assert.isTrue(encoder.matches(filename, f2.getNameIdent())); 		 		File f3 = new File (filetype, filename, filelink, fileorder); 		Assert.notNull(f3); 		Assert.isTrue(filetype==f3.getType()); 		Assert.isTrue(filename.equals(f3.getName())); 		Assert.isTrue(filelink.equals(f3.getLink())); 		Assert.isTrue(fileorder==f3.getIndexOrder()); 		//No possiblity of test as Random is used 		//Assert.isTrue(encoder.matches(filename, f3.getNameIdent())); 		 		File f4 = new File (filetype, ".doc"); 		Assert.notNull(f4); 		Assert.isTrue(filetype==f4.getType()); 		Assert.isTrue(".doc".equals(f4.getName())); 		Assert.isTrue(f4.getNameIdent().contains(".doc")); 		//No possiblity of test as Random is used 		//Assert.isTrue(encoder.matches(filename, f1.getNameIdent())); 		 	} 	  	@Test 	public void setAndGetFileIdTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setId(0); 		Assert.isTrue(0==f1.getId()); 	}  	@Test 	public void setAndGetFileTypeTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setType(1); 		Assert.isTrue(1==f1.getType());  	}  	@Test 	public void setAndGetFileNameTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setName("test_name"); 		Assert.isTrue("test_name".equals(f1.getName())); 	}  	@Test 	public void setAndGetFileNameIdentTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setNameIdent("NAME_IDENT"); 		Assert.isTrue("NAME_IDENT".equals(f1.getNameIdent()));  	}  	@Test 	public void setAndGetFileLinkTest() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setLink(filelink); 		Assert.isTrue(filelink.equals(f1.getLink())); 	}  	@Test 	public void testGetIndexOrder() { 		File f1 = new File (filetype, filename); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		f1.setIndexOrder(5); 		Assert.isTrue(5 == f1.getIndexOrder()); 	}  	@Test 	public void testEqualsObject() { 		File f1 = new File (filetype, filename); 		f1.setId(5); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		File f2 = new File (filetype, filename); 		f2.setId(2); 		Assert.notNull(f2); 		Assert.isTrue(filetype==f2.getType()); 		Assert.isTrue(filename.equals(f2.getName())); 		 		File f3 = new File (filetype, filename); 		f3.setId(5); 		Assert.notNull(f3); 		Assert.isTrue(filetype==f3.getType()); 		Assert.isTrue(filename.equals(f3.getName())); 		 		 		Assert.isTrue(f1.equals(f3)); 		Assert.isTrue(!f1.equals(null)); 		Assert.isTrue(!f1.equals("not a file")); 		Assert.isTrue(!f1.equals(f2)); 	}  	@Test 	public void getFileExtTest() { 		File f1 = new File (filetype, filename); 		f1.setId(5); 		Assert.notNull(f1); 		Assert.isTrue(filetype==f1.getType()); 		Assert.isTrue(filename.equals(f1.getName())); 		 		Assert.isTrue("doc".equals(f1.getFileExtension())); 	}  } 

