package com.fullteaching.backend.integration.comment;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.annotation.Rollback;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.comment.Comment;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.entry.Entry;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.utils.ForumTestUtils;import com.google.gson.Gson;public class CommentControllerTest extends AbstractLoggedControllerUnitTest {	private static String newComment_uri ="/api-comments/entry/{entryId}/forum/";		private static String courseTitle = "Course Title";	private static String info ="Course information";	private static boolean forum = true;			@Before	public void setUp() {		super.setUp();			}	@Rollback	@Test	public void newCommentTest() {					Course c = CourseTestUtils.newCourseWithCd(courseTitle, loggedUser, null, info, forum);						c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);						Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser);		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser);		entry.getComments().add(cm);					c = ForumTestUtils.newEntry(mvc, c, entry, httpSession);				long entryId = c.getCourseDetails().getForum().getEntries().get(0).getId();		long forumId = c.getCourseDetails().getForum().getId();				Comment comment = new Comment();		comment.setMessage("New Comment");				Gson gson = new Gson();		String request_OK = gson.toJson(comment);				//test new message		//test ok 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_OK)					                ).andReturn();						String content = result.getResponse().getContentAsString();						JSONObject json = (JSONObject) new JSONParser().parse(content);			json = (JSONObject) json.get("entry");						Entry e = ForumTestUtils.json2Entry(json.toJSONString());						int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);			Assert.assertEquals("failure - expected user x" , loggedUser,e.getComments().get(0).getUser());		} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request_OK)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+"not_a_id")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();												int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);		} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}	}		@Rollback	@Test	public void replyCommentTest() throws Exception {				Course c = CourseTestUtils.newCourseWithCd(courseTitle, loggedUser, null, info, forum);					c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);								Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser);		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser);		entry.getComments().add(cm);				c = ForumTestUtils.newEntry(mvc, c, entry, httpSession);				long entryId = c.getCourseDetails().getForum().getEntries().get(0).getId();		long forumId = c.getCourseDetails().getForum().getId();				Comment parent = c.getCourseDetails().getForum().getEntries().get(0).getComments().get(0);		Comment comment = new Comment();		comment.setMessage("New Comment");		comment.setCommentParent(parent);				Gson gson = new Gson();		String request_OK = gson.toJson(comment);				//test new message		//test ok 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_OK)					                ).andReturn();						String content = result.getResponse().getContentAsString();						JSONObject json = (JSONObject) new JSONParser().parse(content);			json = (JSONObject) json.get("entry");						Entry e = ForumTestUtils.json2Entry(json.toJSONString());			int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);			Assert.assertEquals("failure - expected user x" , loggedUser, e.getComments().get(0).getReplies().get(0).getUser());				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", String.valueOf(entryId))+forumId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request_OK)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(post(newComment_uri.replace("{entryId}", "not_anID")+"not_a_id")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}	}}
package com.fullteaching.backend.integration.course;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import java.util.HashSet;import java.util.Set;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.utils.LoginTestUtils;import com.fullteaching.backend.user.User;public class CourseControllerTest extends AbstractLoggedControllerUnitTest {		private static String getCourses_uri = "/api-courses/user/";	private static String getCourse_uri = "/api-courses/course/";	private static String newCourse_uri = "/api-courses/new";	private static String editCourse_uri = "/api-courses/edit";	private static String deleteCourse_uri = "/api-courses/delete/";	private static String addAttenders_uri = "/api-courses/edit/add-attenders/course/";	private static String deleteAttenders_uri = "/api-courses/edit/delete-attenders";		private static String[][] attendantsStrings = {	{"fakeemail2@gmail.com","Mock66666","fakeUser","IGNORE"},													{"fakeemail1@gmail.com","Mock66666","fakeUser","IGNORE"}};	private static String[][] secondAtemptAttendant = {	{"invalidEmail","Mock66666","fakeUser","IGNORE"},														{"fakeemail2@gmail.com","repeated","fakeUser","IGNORE"},														{"ok@gmail.com","OKUser1234","fakeUser","IGNORE"}};	@Before	public void setUp() {		super.setUp();	}	@Test	public void getCoursesFromUserTest() {		//test OK		try {			MvcResult result =  mvc.perform(get(getCourses_uri+"741")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//test unauthorized		try {			MvcResult result =  mvc.perform(get(getCourses_uri+"741")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test unauthorized");		}				//KO no long id		try {						MvcResult result =  mvc.perform(get(getCourses_uri+"no_long")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();					/*String content = result.getResponse().getContentAsString();			 * TODO: Assert course */			int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //KO no long id");		}			}	@Test	public void getCourseByIdTest() {		//test OK				try {										MvcResult result =  mvc.perform(get(getCourse_uri+"741")							                .contentType(MediaType.APPLICATION_JSON_VALUE)							                .session((MockHttpSession) httpSession)							                ).andReturn();									int status = result.getResponse().getStatus();										int expected = HttpStatus.OK.value();										Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {					e.printStackTrace();					fail("EXCEPTION: //test OK");				}				//test unauthorized				try {										MvcResult result =  mvc.perform(get(getCourse_uri+"741")							                .contentType(MediaType.APPLICATION_JSON_VALUE)							                ).andReturn();									int status = result.getResponse().getStatus();										int expected = HttpStatus.UNAUTHORIZED.value();										Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {					e.printStackTrace();					fail("EXCEPTION: //KO unauthorized");				}				//KO no long id				try {					MvcResult result =  mvc.perform(get(getCourse_uri+"no_long")							                .contentType(MediaType.APPLICATION_JSON_VALUE)							                .session((MockHttpSession) httpSession)							                ).andReturn();									int status = result.getResponse().getStatus();										int expected = HttpStatus.BAD_REQUEST.value();					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {					e.printStackTrace();					fail("EXCEPTION: //test KO no long id");				}	}	@Test	public void newCourseTest() {				Course c = CourseTestUtils.newCourseWithCd("Test Course", loggedUser, null, "empty", true);		Course c2= CourseTestUtils.newCourse("Test Course", loggedUser, null);						String OK_request =CourseTestUtils.course2JsonStr(c);		String OK_request_nullcd = CourseTestUtils.course2JsonStr(c2);						//test OK		try {			MvcResult result =  mvc.perform(post(newCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request)					                .session((MockHttpSession) httpSession)					                ).andReturn();			int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test OK cd		try {			MvcResult result =  mvc.perform(post(newCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request_nullcd)					                .session((MockHttpSession) httpSession)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK cd");		}		//test unauthorized		try {			MvcResult result =  mvc.perform(post(newCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test unauthorized");		}				//test bad request		try {			MvcResult result =  mvc.perform(post(newCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test  bad request");		}			}	//TODO: // If the user is not the teacher of the course	//TODO: // If courseDetaisl != null	@Test	public void modifyCourseTest() {				Course c = CourseTestUtils.newCourse("To Modify", loggedUser, null);		Course c2 = CourseTestUtils.newCourse("Modified", null, null);				Course cwcd = CourseTestUtils.newCourseWithCd("To Modify", loggedUser, null, "info", false);		Course cwcd2 = CourseTestUtils.newCourseWithCd("To Modify", loggedUser, null, "Modified", false);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession); 		c2.setId(c.getId());				cwcd = CourseTestUtils.createCourseIfNotExist(mvc, cwcd, httpSession); 		cwcd2.setId(cwcd.getId());				String OK_request =CourseTestUtils.course2JsonStr(c2);		String OK_request2 = CourseTestUtils.course2JsonStr(cwcd2);		try {			MvcResult result =  mvc.perform(put(editCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request.replaceAll("_ID_", String.valueOf(c.getId())))					                .session((MockHttpSession) httpSession)					                ).andReturn();						/*			 * TODO check more checks to do			 */						int status = result.getResponse().getStatus();			int expected = HttpStatus.OK.value();						String content = result.getResponse().getContentAsString();			Course c_res = CourseTestUtils.json2Course(content);			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);			Assert.assertEquals("failure - expected title: "+c2.getTitle(), c2.getTitle(), c_res.getTitle());				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				try {			MvcResult result =  mvc.perform(put(editCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request2.replaceAll("_ID_", String.valueOf(c.getId())))					                .session((MockHttpSession) httpSession)					                ).andReturn();						/*			 * TODO check more checks to do			 */						int status = result.getResponse().getStatus();			int expected = HttpStatus.OK.value();						String content = result.getResponse().getContentAsString();			Course c_res = CourseTestUtils.json2Course(content);			Assert.assertEquals("failure - expected HTTP status (2) "+expected, expected, status);			Assert.assertEquals("failure - expected title(2): "+cwcd2.getCourseDetails().getInfo(), cwcd2.getCourseDetails().getInfo(), c_res.getCourseDetails().getInfo());				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test unauthorized		try {			MvcResult result =  mvc.perform(put(editCourse_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(OK_request.replaceAll("_ID_", String.valueOf(c.getId())))					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test unauthorized");		}				}	//TODO: // If the user is not the teacher of the course	@Test	public void delteteCourseTest() {				Course c = CourseTestUtils.newCourse("to delete", loggedUser, null);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				//test unauthorized		try {			MvcResult result =  mvc.perform(delete(deleteCourse_uri+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test unauthorized");		}				//test OK request		try {			MvcResult result =  mvc.perform(delete(deleteCourse_uri+"not_a_course")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				try {				MvcResult result =  mvc.perform(delete(deleteCourse_uri+c.getId())						                .contentType(MediaType.APPLICATION_JSON_VALUE)						                .session((MockHttpSession) httpSession)						                ).andReturn();								int status = result.getResponse().getStatus();								int expected = HttpStatus.OK.value();				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						} catch (Exception e) {				e.printStackTrace();				fail("EXCEPTION: //test OK");			}				}	@Test	public void addAttenders2CourseTest() throws Exception {				//Prepare Test		String attendersEmails = "[";		for (int i = 0; i< attendantsStrings.length;i++) {			attendersEmails += "\""+attendantsStrings[i][0]+"\",";			LoginTestUtils.registerUserIfNotExists(mvc, "[\""+attendantsStrings[i][0]+"\","														+"\""+attendantsStrings[i][1]+"\","														+"\""+attendantsStrings[i][2]+"\","														+"\""+attendantsStrings[i][3]+"\"]");		}		attendersEmails = attendersEmails.substring(0, attendersEmails.length()-1)+"]";				String attenders2Emails = "[";		for (int i = 0; i< secondAtemptAttendant.length;i++) {			attenders2Emails += "\""+secondAtemptAttendant[i][0]+"\",";			LoginTestUtils.registerUserIfNotExists(mvc, "[\""+secondAtemptAttendant[i][0]+"\","														+"\""+secondAtemptAttendant[i][1]+"\","														+"\""+secondAtemptAttendant[i][2]+"\","														+"\""+secondAtemptAttendant[i][3]+"\"]");		}		attenders2Emails = attenders2Emails.substring(0, attenders2Emails.length()-1)+"]";				Course c = CourseTestUtils.newCourse("to modify", loggedUser, null);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				//test unauthorized		try {				MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId())						                .contentType(MediaType.APPLICATION_JSON_VALUE)						                .content(attendersEmails)						                ).andReturn();								int status = result.getResponse().getStatus();								int expected = HttpStatus.UNAUTHORIZED.value();				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						} catch (Exception e) {				e.printStackTrace();				fail("EXCEPTION: //test UNAUTHORIZED");			}		//test bad request		try {			MvcResult result =  mvc.perform(put(addAttenders_uri+"not_a_course")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//test ok 1		try {			MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(attendersEmails)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//test ok 2		try {			MvcResult result =  mvc.perform(put(addAttenders_uri+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(attenders2Emails)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status (2) "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}			}	@Test	public void deleteAttenderFromCourseTest() throws Exception {				Course c = CourseTestUtils.newCourse("to modify", loggedUser, null);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		c = CourseTestUtils.addAttenders(mvc,httpSession,c,attendantsStrings);				Set<User> cattenders = new HashSet<User>();		cattenders.add((User)c.getAttenders().toArray()[0]);				Course ccopia = CourseTestUtils.newCourse(c.getTitle(), loggedUser, cattenders);		ccopia.setId(c.getId());						String ok_request =  CourseTestUtils.course2JsonStr(ccopia);				//test unauthorized		try {				MvcResult result =  mvc.perform(put(deleteAttenders_uri)						                .contentType(MediaType.APPLICATION_JSON_VALUE)						                .content(ok_request)						                ).andReturn();								int status = result.getResponse().getStatus();								int expected = HttpStatus.UNAUTHORIZED.value();				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						} catch (Exception e) {				e.printStackTrace();				fail("EXCEPTION: //test UNAUTHORIZED");			}		//test bad request		try {			MvcResult result =  mvc.perform(put(deleteAttenders_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//test ok 		try {			MvcResult result =  mvc.perform(put(deleteAttenders_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(ok_request)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();			Assert.assertEquals("failure - expected HTTP status  "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}	}}
package com.fullteaching.backend.integration.entry;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.comment.Comment;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.entry.Entry;import com.fullteaching.backend.utils.CourseTestUtils;import com.google.gson.Gson;public class EntryControllerTest extends AbstractLoggedControllerUnitTest {			private static String newEntry_uri ="/api-entries/forum/";		@Before	public void setUp() {		super.setUp();	}	@Test	public void newForumEntryControllerTest() {				Course c = CourseTestUtils.newCourseWithCd("Test Forum", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		long forumId = c.getCourseDetails().getForum().getId();		long cdId = c.getCourseDetails().getId();						Comment cm = new Comment("This is the message", System.currentTimeMillis(), loggedUser);		Entry entry = new Entry("Test Entry",System.currentTimeMillis(),loggedUser);		entry.getComments().add(cm);				Assert.assertTrue((forumId>-1)&&(cdId>-1));				Gson gson = new Gson();		String entry_request = gson.toJson(entry);				//test ok 		try {						MvcResult result =  mvc.perform(post(newEntry_uri+forumId)//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(entry_request+String.valueOf(cdId))					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(post(newEntry_uri+forumId)//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(entry_request+String.valueOf(cdId))					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(post(newEntry_uri+"not_a_id")//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}			}}
package com.fullteaching.backend.integration.file;import static org.junit.Assert.*;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import org.junit.Assert;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.mock.web.MockMultipartFile;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.web.multipart.MultipartHttpServletRequest;import com.fullteaching.backend.AbstractControllerUnitTest;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.file.MimeTypes;import com.fullteaching.backend.filegroup.FileGroup;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.utils.FileTestUtils;public class FileControllerTest extends AbstractLoggedControllerUnitTest {	private static String upload_uri="/api-load-files/upload/course/{courseId}/file-group/";//{fileGroupId}	private static String download_uri="/api-load-files/course/{courseId}/download/";//{fileId}	private static String uploadPicture_uri="/api-load-files/upload/picture/";//{userId}		private static MockMultipartFile firstFile = new MockMultipartFile("data", "filename.txt", "text/plain", "some xml".getBytes());	private static MockMultipartFile secondFile = new MockMultipartFile("data", "other-file-name.txt", "text/plain", "some other type".getBytes());	private static MockMultipartFile jsonFile = new MockMultipartFile("json", "", "application/json", "{\"json\": \"someValue\"}".getBytes());		@Before	public void setUp() {		super.setUp();	}	@Test	public void fileUploadTest() {		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				FileGroup fg = new FileGroup("Test File Group");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);						try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+fg.getId())	                .file(firstFile)	                .session((MockHttpSession) httpSession)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						fg = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - file order"+ 0, 0, fg.getFiles().get(0).getIndexOrder());					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test secondFile		try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+fg.getId())	                .file(secondFile)	                .session((MockHttpSession) httpSession)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						fg = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - file order"+ 1, 1, fg.getFiles().get(1).getIndexOrder());					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+"not_a_long")	                .file(firstFile)	                .session((MockHttpSession) httpSession)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//UNAUTHORIZED		try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(upload_uri.replace("{courseId}",""+c.getId())+"not_a_long")	                .file(firstFile)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}	}		@Test	public void fileDownloadTest() {		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				FileGroup fg = new FileGroup("Test File Group");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);				fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c);				long fileId = fg.getFiles().get(0).getId();		String expected_contentType = MimeTypes.getMimeType(fg.getFiles().get(0).getFileExtension());				//test OK		try {			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+fileId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						String contentType = result.getResponse().getContentType();						String content = result.getResponse().getContentAsString();			System.out.println(content);			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);			Assert.assertEquals("failure - expected ContenType"+ expected_contentType, expected_contentType, contentType);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test Unkown file				try {					MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+23123)//Unexisting file							                .contentType(MediaType.APPLICATION_JSON_VALUE)							                .session((MockHttpSession) httpSession)							                ).andReturn();								int status = result.getResponse().getStatus();										int expected = HttpStatus.OK.value();										String content = result.getResponse().getContentAsString();					System.out.println(content);					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {					e.printStackTrace();					fail("EXCEPTION: //test OK");				}		//test UNAUTHORIZED		try {			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+fileId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						String content = result.getResponse().getContentAsString();			System.out.println(content);			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("UNAUTHORIZED: //test OK");		}				//test BAD_REQUEST UNPROCESSABLE_ENTITY		try {			MvcResult result =  mvc.perform(get(download_uri.replace("{courseId}", ""+c.getId())+"not_a_long")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNPROCESSABLE_ENTITY.value();						String content = result.getResponse().getContentAsString();			System.out.println(content);			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("UNAUTHORIZED: //test UNPROCESSABLE_ENTITY");		}	}		@Test	public void pictureUploadTest() {			try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+loggedUser.getId())	                .file(firstFile)	                .session((MockHttpSession) httpSession)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+"not_a_long")	                .file(firstFile)	                .session((MockHttpSession) httpSession)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//UNAUTHORIZED		try {			MvcResult result =  mvc.perform(MockMvcRequestBuilders.fileUpload(uploadPicture_uri+loggedUser.getId())	                .file(firstFile)	                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);								} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}	}}
package com.fullteaching.backend.integration.filegroup;import static org.junit.Assert.*;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import java.util.List;import org.junit.Assert;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.coursedetails.CourseDetails;import com.fullteaching.backend.file.File;import com.fullteaching.backend.filegroup.FileGroup;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.utils.FileTestUtils;public class FileGroupControllerTest extends AbstractLoggedControllerUnitTest {	private static String newFile_uri="/api-files/";//{courseDetails_id}	private static String modifyGroupFile_uri="/api-files/edit/file-group/course/";//{courseId}	private static String editOrder_uri="/api-files/edit/file-order/course/{courseId}/file/{fileId}/from/{sourceID}/to/{targetId}/pos/";//newPosition	private static String modifyFile_uri="/api-files/edit/file/file-group/{fileGroupId}/course/";//{courseId}	private static String deleteGroup_uri="/api-files/delete/file-group/{fileGroupId}/course/";//{courseId}	private static String deleteFile_uri="/api-files/delete/file/{fileId}/file-group/{fileGroupId}/course/";//{courseId}	@Before	public void setUp() {		super.setUp();	}	@Test	public void testNewFileGroup() {		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				CourseDetails cd = null; 				FileGroup fg = new FileGroup("New FileGroup");		String request_OK = FileTestUtils.fileGroup2Json(fg);				long courseId = c.getCourseDetails().getId();						try {			MvcResult result =  mvc.perform(post(newFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();			String content = result.getResponse().getContentAsString();			cd = CourseTestUtils.json2CourseDetails(content);						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//Unauthorized		try {			MvcResult result =  mvc.perform(post(newFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(post(newFile_uri+"notANumber")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}						//Test for filegroups with parent		fg = FileTestUtils.getFileGroupFromCd(cd, fg.getTitle());		FileGroup fg2 = new FileGroup("New FileGroup with parent", fg);		String request_withParent = FileTestUtils.fileGroup2Json(fg2);				try {			MvcResult result =  mvc.perform(post(newFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_withParent)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK with Parent");		}				//fake parent		fg.setId(5654);		FileGroup fg3 = new FileGroup("New FileGroup with parent", fg);		String request_withParent_BadRequest = FileTestUtils.fileGroup2Json(fg3);				try {			MvcResult result =  mvc.perform(post(newFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_withParent_BadRequest)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();					Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK with Parent");		}			}	@Test	public void testModifyFileGroup() {		//Prepare Test		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);				CourseDetails cd = null; 				FileGroup fg = new FileGroup("New FileGroup");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);		long courseId = c.getId();				fg.setTitle("Modified FileGroup");				String request_OK = FileTestUtils.fileGroup2Json(fg);		try {			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();			FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);			Assert.assertEquals("not modified", "Modified FileGroup", fg1.getTitle());					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//Unauthorized		try {			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+"not_A_Number")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//NOT_MODIFIED		fg.setId(4564564); //fake id		String request_KO = FileTestUtils.fileGroup2Json(fg);		try {			MvcResult result =  mvc.perform(put(modifyGroupFile_uri+courseId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_KO)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.NOT_FOUND.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test NOT_MODIFIED");		}							}		@Test	public void testEditFileOrder() {		///api-files/edit/file-order/course/{courseId}/file/{fileId}/from/{sourceID}/to/{targetId}/pos/";//newPosition				Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);						FileGroup fg = new FileGroup("New FileGroup");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c);		long firstFileId = fg.getFiles().get(0).getId();		fg = FileTestUtils.uploadOtherTestFile(mvc, httpSession, fg, c);		long secondFileId = fg.getFiles().get(1).getId();		FileGroup fg2 = new FileGroup("Other FileGroup");		fg2 = FileTestUtils.newFileGroup(mvc, httpSession, fg2, c);		fg2 = FileTestUtils.uploadOtherTestFile(mvc, httpSession, fg2, c);				try {			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", ""+c.getId())															 .replace("{fileId}", ""+firstFileId)															 .replace("{sourceID}", ""+fg.getId())															 .replace("{targetId}", ""+fg2.getId())+ "0")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();			List<FileGroup> fglst = FileTestUtils.json2fileGroupList(result.getResponse().getContentAsString());						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						/*check the filegroups*/			Assert.assertEquals("failure - not moved", 1, fglst.get(0).getFiles().size());			Assert.assertEquals("failure - not moved", 2, fglst.get(1).getFiles().size());						Assert.assertEquals("failure - order fail" , 0, fglst.get(0).getFiles().get(0).getIndexOrder());			Assert.assertEquals("failure - order fail" , 0, fglst.get(1).getFiles().get(0).getIndexOrder());			Assert.assertEquals("failure - order fail" , 1, fglst.get(1).getFiles().get(1).getIndexOrder());					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", "not_a_long")															 .replace("{fileId}", ""+firstFileId)															 .replace("{sourceID}", ""+fg.getId())															 .replace("{targetId}", ""+fg2.getId())+ "0")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			//FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//UNAUTHORIZED		try {			MvcResult result =  mvc.perform(put(editOrder_uri.replace("{courseId}", ""+c.getId())															 .replace("{fileId}", ""+firstFileId)															 .replace("{sourceID}", ""+fg.getId())															 .replace("{targetId}", ""+fg2.getId())+ "0")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();												Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}	}		@Test	public void testModifyFile() {		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);						FileGroup fg = new FileGroup("New FileGroup");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);				File f_not_existing = new File(1,"no Exists");		String not_modified = FileTestUtils.file2Json(f_not_existing);				//NOT_MODIFIED 1		try {			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(not_modified)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.NOT_MODIFIED.value();				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);							} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test NOT_MODIFIED 1");		}				//NOT_MODIFIED 2		try {			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", "564")+c.getId())//notExisting fileGroup					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(not_modified)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.NOT_MODIFIED.value();				Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);							} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test NOT_MODIFIED 2");		}						//OK preparation		fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c);				File f = fg.getFiles().get(0);		f.setName("Modified File");				String request_OK = FileTestUtils.file2Json(f);		try {			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();			FileGroup fg_r = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						/*check the filename*/			Assert.assertEquals("failure - not modified", "Modified File", fg_r.getFiles().get(0).getName());							} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//BAD_REQUEST		try {			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+"not_a_long")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			//FileGroup fg1 = FileTestUtils.json2FileGroup(result.getResponse().getContentAsString());						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//UNAUTHORIZED		try {			MvcResult result =  mvc.perform(put(modifyFile_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request_OK)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();												Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}	}			@Test	public void testDeleteFileGroup() {		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);						FileGroup fg = new FileGroup("New FileGroup");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);				//OK		try {			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//Bad Request		try {			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+"not_a_long")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				try {			MvcResult result =  mvc.perform(delete(deleteGroup_uri.replace("{fileGroupId}", ""+fg.getId())+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}			}		@Test	public void testDeleteFile() {		//private static String deleteFile_uri="/api-files/delete/file/{fileId}/file-group/{fileGroupId}/course/";//{courseId}		Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "this is the info", true);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);						FileGroup fg = new FileGroup("New FileGroup");		fg = FileTestUtils.newFileGroup(mvc, httpSession, fg, c);				fg = FileTestUtils.uploadTestFile(mvc, httpSession, fg, c);		long firstFileId = fg.getFiles().get(0).getId();						//OK		try {			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId())																 .replace("{fileId}", ""+firstFileId)+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}				//Bad Request (already deleted)		/*try {			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId())				 					 .replace("{fileId}", ""+firstFileId)+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST already deleted");		}*/				//BAD_REQUEST		try {			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId())					 											 .replace("{fileId}", ""+firstFileId)+"not_a_long")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}				try {			MvcResult result =  mvc.perform(delete(deleteFile_uri.replace("{fileGroupId}", ""+fg.getId())					 											 .replace("{fileId}", ""+firstFileId)+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();				int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);										} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}			}}
package com.fullteaching.backend.integration.forum;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.utils.CourseTestUtils;public class ForumControllerTest extends AbstractLoggedControllerUnitTest {		private static String toggleForum_uri = "/api-forum/edit/";		@Before	public void setUp() {		super.setUp();	}	@Test	public void toggleForumTest() {				Course c = CourseTestUtils.newCourseWithCd("Course Title", loggedUser, null, "this is the info", false);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		//test ok 		try {			MvcResult result =  mvc.perform(put(toggleForum_uri+c.getCourseDetails().getId())//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content("true")					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(put(toggleForum_uri+c.getCourseDetails().getId())//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content("true")					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(put(toggleForum_uri+"not_a_id")//fakeID					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}			}}
package com.fullteaching.backend.integration.security;import java.util.ArrayList;import java.util.Collection;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import com.fullteaching.backend.AbstractUnitTest;import com.fullteaching.backend.security.AuthorizationService;import com.fullteaching.backend.user.User;import com.fullteaching.backend.user.UserComponent;public class AutorizationServiceUnitaryTest extends AbstractUnitTest {	@Autowired	private UserComponent user;	@Autowired	private AuthorizationService service;		@Before	public void setUp() throws Exception {		if(user.getLoggedUser()==null) {			String[] roles = {"STUDENT"};			User u = new User("TestUser", "Mock6666", "mock", null,roles);			user.setLoggedUser(u);		}		}	@Test	public void checkBackendLoggedTest() {		ResponseEntity<Object> r = service.checkBackendLogged();						Assert.assertEquals("Expeceted null", null, r);						user.setLoggedUser(null);		ResponseEntity<Object> r2 = service.checkBackendLogged();				int status2 = r2.getStatusCodeValue();		int expected2 = HttpStatus.UNAUTHORIZED.value();				Assert.assertTrue("failure login - expected HTTP status "+				expected2 +				" but was: "+status2, 				status2==expected2);				user.setLoggedUser(null);	}	@Test	public void checkAuthorizationTest() {		String o ="Example object";				String[] roles = {"STUDENT"};		User u = new User("FailUser", "Mock6666", "mock", null,roles);				ResponseEntity <Object> r = service.checkAuthorization(null, u);		int status1 = r.getStatusCodeValue();		int expected1 = HttpStatus.NOT_FOUND.value();				Assert.assertEquals("failure - expected HTTP status "+expected1, expected1, status1);						ResponseEntity <Object> r2 = service.checkAuthorization(o, u);		int status2 = r2.getStatusCodeValue();		int expected2 = HttpStatus.UNAUTHORIZED.value();				Assert.assertTrue("failure login - expected HTTP status "+				expected2 +				" but was: "+status2, 				status2==expected2);				ResponseEntity <Object> r3 = service.checkAuthorization(o, user.getLoggedUser());				Assert.assertEquals("Expeceted null", null, r3);			}	@Test	public void checkAuthorizationUsersTest() {		String o ="Example object";				String[] roles = {"STUDENT"};		Collection<User> u = new ArrayList<User>();				u.add(new User("user3", "Mock6666", "mock", null,roles));		u.add(new User("user1", "Mock6666", "mock", null,roles));		u.add(new User("user2", "Mock6666", "mock", null,roles));						ResponseEntity <Object> r = service.checkAuthorizationUsers(null, u);		int status1 = r.getStatusCodeValue();		int expected1 = HttpStatus.NOT_FOUND.value();				Assert.assertEquals("failure - expected HTTP status "+expected1, expected1, status1);						ResponseEntity <Object> r2 = service.checkAuthorizationUsers(o, u);		int status2 = r2.getStatusCodeValue();		int expected2 = HttpStatus.UNAUTHORIZED.value();				Assert.assertTrue("failure login - expected HTTP status "+				expected2 +				" but was: "+status2, 				status2==expected2);				u.add(user.getLoggedUser());		ResponseEntity <Object> r3 = service.checkAuthorizationUsers(o, u);				Assert.assertEquals("Expeceted null", null, r3);			}}
package com.fullteaching.backend.integration.security;import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import java.io.UnsupportedEncodingException;import javax.servlet.http.HttpSession;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import com.fullteaching.backend.AbstractControllerUnitTest;import com.fullteaching.backend.utils.LoginTestUtils;public class LoginControllerUnitaryTest extends AbstractControllerUnitTest {		String user_parameters = "[\"fakeemail@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";	String logout_uri = "/api-logOut";	String login_uri = "/api-logIn";		@Before	public void setUp() {		mvc = MockMvcBuilders.webAppContextSetup(webAppCtx)				.apply(springSecurity())				.build();	}	@Test	public void logInSecurityTest() throws UnsupportedEncodingException, Exception {		LoginTestUtils.registerUserIfNotExists(mvc, user_parameters);				String userPass = "fakeemail@gmail.com:Mock66666";		MvcResult result_login = mvc.perform(get(login_uri)						.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(userPass))						.header("X-Requested-With", "XMLHttpRequest")					.contentType(MediaType.APPLICATION_JSON_VALUE)				).andReturn();				System.out.println(result_login.getResponse().toString());		int status_login = result_login.getResponse().getStatus();				Assert.assertTrue("failure login - expected HTTP status "+											HttpStatus.OK.value() +											" but was: "+status_login, 					status_login==HttpStatus.OK.value());				//login KO 		MvcResult result_login_ko = mvc.perform(get(login_uri)						.header("X-Requested-With", "XMLHttpRequest")					.contentType(MediaType.APPLICATION_JSON_VALUE)				).andReturn();				System.out.println(result_login_ko.getResponse().toString());		int status_login_ko = result_login_ko.getResponse().getStatus();				Assert.assertTrue("failure login - expected HTTP status "+											HttpStatus.UNAUTHORIZED.value() +											" but was: "+status_login_ko, 											status_login_ko==HttpStatus.UNAUTHORIZED.value());		//login KO bad password		String userBadPass = "fakeemail@gmail.com:BadPass";		MvcResult result_login_bad_password = mvc.perform(get(login_uri)						.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(userBadPass))						.header("X-Requested-With", "XMLHttpRequest")					.contentType(MediaType.APPLICATION_JSON_VALUE)				).andReturn();				System.out.println(result_login_ko.getResponse().toString());		int status_login_bad_password = result_login_bad_password.getResponse().getStatus();				Assert.assertTrue("failure login - expected HTTP status "+											HttpStatus.UNAUTHORIZED.value() +											" but was: "+status_login_bad_password, 											status_login_bad_password==HttpStatus.UNAUTHORIZED.value());				//login KO nouser				String noUser = "nouser:BadPass";				MvcResult result_login_noUser = mvc.perform(get(login_uri)								.header("Authorization", "Basic "+LoginTestUtils.utf8_to_b64(noUser))								.header("X-Requested-With", "XMLHttpRequest")							.contentType(MediaType.APPLICATION_JSON_VALUE)						).andReturn();								System.out.println(result_login_ko.getResponse().toString());				int status_login_noUser = result_login_noUser.getResponse().getStatus();								Assert.assertTrue("failure login - expected HTTP status "+													HttpStatus.UNAUTHORIZED.value() +													" but was: "+status_login_noUser, 													status_login_noUser==HttpStatus.UNAUTHORIZED.value());					}	@Test	public void logOutSecurityTest() throws Exception {		/*Create new user*/		LoginTestUtils.registerUserIfNotExists(mvc, user_parameters);				/*Login user*/		HttpSession session = LoginTestUtils.logIn(mvc, "fakeemail@gmail.com", "Mock66666");				/*Test LogOut OK*/		MvcResult result_pass = mvc.perform(put(logout_uri)				.contentType(MediaType.APPLICATION_JSON_VALUE)				.session((MockHttpSession) session)			).andReturn();				int status_pass = result_pass.getResponse().getStatus();		Assert.assertTrue("failure login - expected HTTP status "+												HttpStatus.OK.value() +												" but was: "+status_pass, 							status_pass==HttpStatus.OK.value());				/*Test LogOut Unauthorized*/		MvcResult result_unauthorized = mvc.perform(put(logout_uri)				.contentType(MediaType.APPLICATION_JSON_VALUE)				.session((MockHttpSession) session)			).andReturn();				int status_unauthorized = result_unauthorized.getResponse().getStatus();		Assert.assertTrue("failure login - expected HTTP status "+												HttpStatus.UNAUTHORIZED.value() +												" but was: "+status_unauthorized, 								status_unauthorized==HttpStatus.UNAUTHORIZED.value());						}}
package com.fullteaching.backend.integration.session;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import com.fullteaching.backend.AbstractLoggedControllerUnitTest;import com.fullteaching.backend.course.Course;import com.fullteaching.backend.session.Session;import com.fullteaching.backend.utils.CourseTestUtils;import com.fullteaching.backend.utils.SessionTestUtils;import com.google.gson.Gson;public class SessionControllerTest extends AbstractLoggedControllerUnitTest {		private static String newSession_uri="/api-sessions/course/";	private static String editSession_uri="/api-sessions/edit";	private static String deleteSession_uri="/api-sessions/delete/";		@Before	public void setUp() {		super.setUp();	}	@Test	public void newSessionTest() {				Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		Long date = System.currentTimeMillis();		Session s = new Session("Mock Session", "this descriptions", date, c);				Gson gson = new Gson();		String request = gson.toJson(s);		//test ok ;		try {			MvcResult result =  mvc.perform(post(newSession_uri+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(post(newSession_uri+c.getId())					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(post(newSession_uri+"not_a_id")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}			}	@Test	public void modifySessionTest() {				Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		Long date = System.currentTimeMillis();		Session s = new Session("Mock Session", "this descriptions", date, c);				c = SessionTestUtils.newSession(mvc, s, c, httpSession);				Session toChange = (Session)c.getSessions().toArray()[0];				toChange.setDate(System.currentTimeMillis());		toChange.setTitle("MODIFIED");		Gson gson = new Gson();				String request = gson.toJson(toChange);				//test ok ;		try {			MvcResult result =  mvc.perform(put(editSession_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                .content(request)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(put(editSession_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(request)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(put(editSession_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}	}	@Test	public void deleteSessionTest() {				Course c = CourseTestUtils.newCourseWithCd("Course", loggedUser, null, "This is the info", false);		c = CourseTestUtils.createCourseIfNotExist(mvc, c, httpSession);		Long date = System.currentTimeMillis();		Session s = new Session("Mock Session", "this descriptions", date, c);				c = SessionTestUtils.newSession(mvc, s, c, httpSession);				long sessionId = ((Session)c.getSessions().toArray()[0]).getId();				//test ok ;		try {			MvcResult result =  mvc.perform(delete(deleteSession_uri+sessionId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.OK.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test OK");		}		//test UNAUTHORIZED 		try {						MvcResult result =  mvc.perform(delete(deleteSession_uri+sessionId)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.UNAUTHORIZED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test UNAUTHORIZED");		}				//test BAD_REQUEST 		try {						MvcResult result =  mvc.perform(delete(deleteSession_uri+"not_a_id")					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .session((MockHttpSession) httpSession)					                ).andReturn();						int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("EXCEPTION: //test BAD_REQUEST");		}		//Course ==null hasn't been found...	}}
package com.fullteaching.backend.integration.user;import static org.junit.Assert.fail;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;import javax.servlet.http.HttpSession;import org.junit.Assert;import org.junit.Before;import org.junit.Test;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.web.servlet.MvcResult;import org.springframework.transaction.annotation.Transactional;import com.fullteaching.backend.AbstractControllerUnitTest;import com.fullteaching.backend.utils.LoginTestUtils;/** * @author gtunon * *//*@Transactional After each test the BBDD is rolled back*/@Transactionalpublic class UserControllerTest extends AbstractControllerUnitTest {			//urls	static String new_user_uri = "/api-users/new";	static String change_password_uri = "/api-users/changePassword";	static String login_uri = "/api-logIn";		//userStrings	static String ok_parameters = "[\"unique@gmail.com\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";	static String ko_parameters1 = "[\"unique@gmail.com\", \"Mock66666\", \"repeatedUser\", \"IGNORE\"]";	static String ko_parameters2 = "[\"unique_unique@gmail.com\", \"Mock\", \"InvalidPassword\", \"IGNORE\"]";	static String ko_parameters3 = "[\"nonvalidMAIL\", \"Mock66666\", \"fakeUser\", \"IGNORE\"]";		//passParameters	static String pass_parameters = "[\"Mock66666\", \"Mock77777\"]";	static String bad1_parameters = "[\"Mock66666\", \"Mock77777\"]";	static String bad2_parameters = "[\"Mock77777\", \"notvalid\"]";		//roles	String[] roles = {"STUDENT"};	@Before	public void setUp() {		super.setUp();	}		/**	 * Test method for {@link com.fullteaching.backend.user.UserController#newUser(java.lang.String[])}.	 */	@Test	public void controllerNewUserTest() {		/*Test OK*/		try {			MvcResult result =  mvc.perform(post(new_user_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(ok_parameters)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.CREATED.value();						Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);				} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - OK");		}				/*Test repeated user*/		try {			MvcResult result =  mvc.perform(post(new_user_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(ko_parameters1)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.CONFLICT.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - repeated user");		}				/*Test bad password*/		try {			MvcResult result =  mvc.perform(post(new_user_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(ko_parameters2)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.BAD_REQUEST.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);						} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - badPassword");		}					/*Test bad email*/		try {			MvcResult result =  mvc.perform(post(new_user_uri)					                .contentType(MediaType.APPLICATION_JSON_VALUE)					                .content(ko_parameters3)					                ).andReturn();					int status = result.getResponse().getStatus();						int expected = HttpStatus.FORBIDDEN.value();			Assert.assertEquals("failure - expected HTTP status "+expected, expected, status);					} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - badEmail");		}	}	/**	 * Test method for {@link com.fullteaching.backend.user.UserController#changePassword(java.lang.String[])}.	 * @throws Exception 	 */	@Test	public void userChangePasswordTest() throws Exception {				/*Create new user*/			LoginTestUtils.registerUserIfNotExists(mvc, ok_parameters);						/*Login user*/			HttpSession session = LoginTestUtils.logIn(mvc, "unique@gmail.com", "Mock66666");						try {			/*Test change password OK*/			MvcResult result_pass = mvc.perform(put(change_password_uri)					.contentType(MediaType.APPLICATION_JSON_VALUE)					.content(pass_parameters)					.session((MockHttpSession) session)				).andReturn();						int status_pass = result_pass.getResponse().getStatus();			Assert.assertTrue("failure login - expected HTTP status "+													HttpStatus.OK.value() +													" but was: "+status_pass, 								status_pass==HttpStatus.OK.value());		} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - OK");		}		try {			/*Test change password bad initial password*/			MvcResult result_bad1 = mvc.perform(put(change_password_uri)					.contentType(MediaType.APPLICATION_JSON_VALUE)					.content(bad1_parameters)					.session((MockHttpSession) session)				).andReturn();						int status_bad1 = result_bad1.getResponse().getStatus();			Assert.assertTrue("failure login - expected HTTP status "+													HttpStatus.CONFLICT.value() +													" but was: "+status_bad1, 										status_bad1==HttpStatus.CONFLICT.value());		} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - OK");		}		try {				/*Test change password bad initial password*/			MvcResult result_bad2 = mvc.perform(put(change_password_uri)					.contentType(MediaType.APPLICATION_JSON_VALUE)					.content(bad2_parameters)					.session((MockHttpSession) session)				).andReturn();						int status_bad2 = result_bad2.getResponse().getStatus();			Assert.assertTrue("failure login - expected HTTP status "+													HttpStatus.NOT_MODIFIED.value() +													" but was: "+status_bad2, 										status_bad2==HttpStatus.NOT_MODIFIED.value());		} catch (Exception e) {			e.printStackTrace();			fail("Exception: newUserTest - OK");		}		}		}